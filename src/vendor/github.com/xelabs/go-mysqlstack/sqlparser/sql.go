// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CONSTRAINT = 57363
const FULLTEXT = 57364
const HASH = 57365
const KEY_BLOCK_SIZE = 57366
const PARSER = 57367
const RTREE = 57368
const SPATIAL = 57369
const SYMBOL = 57370
const UNIQUE = 57371
const KEY = 57372
const ALL = 57373
const DISTINCT = 57374
const AS = 57375
const EXISTS = 57376
const ASC = 57377
const DESC = 57378
const INTO = 57379
const DUPLICATE = 57380
const DEFAULT = 57381
const SET = 57382
const LOCK = 57383
const FULL = 57384
const CHECKSUM = 57385
const VALUES = 57386
const LAST_INSERT_ID = 57387
const NEXT = 57388
const VALUE = 57389
const SHARE = 57390
const MODE = 57391
const SQL_NO_CACHE = 57392
const SQL_CACHE = 57393
const JOIN = 57394
const STRAIGHT_JOIN = 57395
const LEFT = 57396
const RIGHT = 57397
const INNER = 57398
const OUTER = 57399
const CROSS = 57400
const NATURAL = 57401
const USE = 57402
const FORCE = 57403
const ON = 57404
const ID = 57405
const HEX = 57406
const STRING = 57407
const INTEGRAL = 57408
const FLOAT = 57409
const HEXNUM = 57410
const VALUE_ARG = 57411
const LIST_ARG = 57412
const COMMENT = 57413
const COMMENT_KEYWORD = 57414
const NULL = 57415
const TRUE = 57416
const FALSE = 57417
const OFF = 57418
const OR = 57419
const AND = 57420
const NOT = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const ELSE = 57426
const END = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const INTERVAL = 57443
const JSON_EXTRACT_OP = 57444
const JSON_UNQUOTE_EXTRACT_OP = 57445
const CREATE = 57446
const ALTER = 57447
const DROP = 57448
const RENAME = 57449
const ANALYZE = 57450
const ADD = 57451
const MODIFY = 57452
const TABLE = 57453
const INDEX = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const USING = 57459
const PRIMARY = 57460
const COLUMN = 57461
const SHOW = 57462
const DESCRIBE = 57463
const EXPLAIN = 57464
const DATE = 57465
const ESCAPE = 57466
const REPAIR = 57467
const OPTIMIZE = 57468
const TRUNCATE = 57469
const BIT = 57470
const TINYINT = 57471
const SMALLINT = 57472
const MEDIUMINT = 57473
const INT = 57474
const INTEGER = 57475
const BIGINT = 57476
const INTNUM = 57477
const REAL = 57478
const DOUBLE = 57479
const FLOAT_TYPE = 57480
const DECIMAL = 57481
const NUMERIC = 57482
const TIME = 57483
const TIMESTAMP = 57484
const DATETIME = 57485
const YEAR = 57486
const CHAR = 57487
const VARCHAR = 57488
const BOOL = 57489
const CHARACTER = 57490
const VARBINARY = 57491
const NCHAR = 57492
const CHARSET = 57493
const TEXT = 57494
const TINYTEXT = 57495
const MEDIUMTEXT = 57496
const LONGTEXT = 57497
const BLOB = 57498
const TINYBLOB = 57499
const MEDIUMBLOB = 57500
const LONGBLOB = 57501
const JSON = 57502
const ENUM = 57503
const GEOMETRY = 57504
const POINT = 57505
const LINESTRING = 57506
const POLYGON = 57507
const GEOMETRYCOLLECTION = 57508
const MULTIPOINT = 57509
const MULTILINESTRING = 57510
const MULTIPOLYGON = 57511
const NULLX = 57512
const AUTO_INCREMENT = 57513
const APPROXNUM = 57514
const SIGNED = 57515
const UNSIGNED = 57516
const ZEROFILL = 57517
const FIXED = 57518
const DYNAMIC = 57519
const STORAGE = 57520
const DISK = 57521
const MEMORY = 57522
const COLUMN_FORMAT = 57523
const AVG_ROW_LENGTH = 57524
const COMPRESSION = 57525
const CONNECTION = 57526
const DATA = 57527
const DIRECTORY = 57528
const DELAY_KEY_WRITE = 57529
const ENCRYPTION = 57530
const INSERT_METHOD = 57531
const MAX_ROWS = 57532
const MIN_ROWS = 57533
const PACK_KEYS = 57534
const PASSWORD = 57535
const ROW_FORMAT = 57536
const STATS_AUTO_RECALC = 57537
const STATS_PERSISTENT = 57538
const STATS_SAMPLE_PAGES = 57539
const TABLESPACE = 57540
const COMPRESSED = 57541
const REDUNDANT = 57542
const COMPACT = 57543
const TOKUDB_DEFAULT = 57544
const TOKUDB_FAST = 57545
const TOKUDB_SMALL = 57546
const TOKUDB_ZLIB = 57547
const TOKUDB_QUICKLZ = 57548
const TOKUDB_LZMA = 57549
const TOKUDB_SNAPPY = 57550
const TOKUDB_UNCOMPRESSED = 57551
const DATABASES = 57552
const TABLES = 57553
const WARNINGS = 57554
const VARIABLES = 57555
const EVENTS = 57556
const BINLOG = 57557
const GTID = 57558
const STATUS = 57559
const COLUMNS = 57560
const FIELDS = 57561
const CURRENT_TIMESTAMP = 57562
const DATABASE = 57563
const CURRENT_DATE = 57564
const CURRENT_TIME = 57565
const LOCALTIME = 57566
const LOCALTIMESTAMP = 57567
const UTC_DATE = 57568
const UTC_TIME = 57569
const UTC_TIMESTAMP = 57570
const REPLACE = 57571
const CONVERT = 57572
const CAST = 57573
const GROUP_CONCAT = 57574
const SEPARATOR = 57575
const MATCH = 57576
const AGAINST = 57577
const BOOLEAN = 57578
const LANGUAGE = 57579
const WITH = 57580
const QUERY = 57581
const EXPANSION = 57582
const UNUSED = 57583
const PARTITION = 57584
const PARTITIONS = 57585
const LIST = 57586
const XA = 57587
const DISTRIBUTED = 57588
const ENGINES = 57589
const VERSIONS = 57590
const PROCESSLIST = 57591
const QUERYZ = 57592
const TXNZ = 57593
const KILL = 57594
const ENGINE = 57595
const SINGLE = 57596
const BEGIN = 57597
const START = 57598
const TRANSACTION = 57599
const COMMIT = 57600
const ROLLBACK = 57601
const GLOBAL = 57602
const LOCAL = 57603
const SESSION = 57604
const NAMES = 57605
const ISOLATION = 57606
const LEVEL = 57607
const READ = 57608
const WRITE = 57609
const ONLY = 57610
const REPEATABLE = 57611
const COMMITTED = 57612
const UNCOMMITTED = 57613
const SERIALIZABLE = 57614
const RADON = 57615
const ATTACH = 57616
const ATTACHLIST = 57617
const DETACH = 57618
const RESHARD = 57619
const CLEANUP = 57620
const RECOVER = 57621

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"KEY_BLOCK_SIZE",
	"PARSER",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4727

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 214,
	90, 838,
	-2, 654,
	-1, 220,
	90, 700,
	-2, 632,
	-1, 457,
	118, 684,
	-2, 680,
	-1, 458,
	118, 685,
	-2, 681,
	-1, 492,
	115, 82,
	165, 82,
	168, 82,
	-2, 93,
	-1, 543,
	1, 76,
	297, 76,
	-2, 82,
	-1, 663,
	5, 27,
	-2, 603,
	-1, 697,
	115, 82,
	165, 82,
	168, 82,
	-2, 94,
	-1, 755,
	30, 301,
	63, 301,
	66, 301,
	129, 301,
	-2, 835,
	-1, 808,
	1, 77,
	297, 77,
	-2, 82,
	-1, 895,
	118, 687,
	-2, 683,
	-1, 1061,
	5, 28,
	-2, 482,
	-1, 1085,
	5, 28,
	-2, 604,
	-1, 1216,
	5, 27,
	-2, 606,
	-1, 1342,
	5, 28,
	-2, 607,
}

const yyPrivate = 57344

const yyLast = 9697

var yyAct = [...]int{

	458, 1239, 1345, 1372, 433, 566, 1419, 1207, 1378, 1247,
	435, 1376, 411, 1288, 1246, 666, 1274, 215, 189, 790,
	784, 1402, 924, 804, 676, 1143, 975, 948, 925, 1285,
	1186, 1054, 994, 879, 66, 1046, 886, 1206, 99, 977,
	351, 219, 894, 623, 3, 889, 905, 856, 569, 56,
	436, 50, 350, 921, 836, 952, 1009, 667, 725, 809,
	410, 759, 698, 477, 99, 400, 223, 478, 353, 466,
	218, 211, 460, 800, 978, 476, 210, 208, 409, 198,
	99, 99, 559, 183, 396, 397, 55, 941, 736, 1094,
	940, 685, 686, 942, 188, 398, 480, 99, 1095, 1096,
	479, 50, 480, 746, 684, 395, 479, 728, 175, 194,
	1298, 1346, 178, 180, 179, 181, 182, 24, 51, 26,
	27, 695, 348, 1445, 1418, 1401, 347, 1380, 634, 1444,
	1392, 1442, 1417, 1199, 346, 1391, 1268, 70, 413, 723,
	345, 172, 71, 379, 73, 833, 367, 46, 1151, 888,
	368, 28, 1152, 1153, 36, 372, 484, 891, 961, 960,
	1004, 783, 374, 375, 1171, 791, 1015, 1263, 1315, 1261,
	951, 37, 1029, 1000, 53, 1028, 1403, 1027, 1381, 1145,
	515, 999, 99, 362, 75, 1337, 1339, 355, 1026, 389,
	391, 1368, 1367, 732, 1366, 76, 77, 358, 60, 984,
	985, 986, 980, 99, 357, 360, 99, 987, 431, 432,
	356, 223, 96, 80, 79, 218, 954, 223, 223, 953,
	954, 485, 485, 953, 62, 63, 64, 65, 1295, 390,
	390, 1253, 30, 31, 32, 1145, 34, 1088, 463, 571,
	753, 1380, 462, 72, 1024, 50, 1060, 571, 35, 47,
	39, 1058, 726, 48, 49, 33, 503, 1338, 613, 614,
	369, 934, 622, 727, 729, 730, 731, 791, 733, 734,
	735, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	516, 473, 481, 601, 692, 529, 532, 533, 534, 535,
	536, 537, 1381, 538, 539, 540, 541, 542, 517, 518,
	519, 520, 501, 502, 530, 78, 504, 1423, 979, 505,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 521,
	522, 523, 524, 525, 526, 527, 528, 1212, 173, 1390,
	1001, 1002, 1155, 576, 724, 997, 998, 570, 591, 752,
	579, 601, 1066, 1023, 838, 570, 949, 1025, 403, 461,
	1245, 1382, 933, 68, 483, 99, 1404, 52, 1386, 694,
	99, 99, 99, 577, 1201, 99, 906, 544, 988, 99,
	99, 1438, 406, 38, 488, 578, 577, 1243, 1380, 579,
	40, 863, 1156, 41, 42, 361, 44, 43, 468, 578,
	577, 203, 579, 531, 464, 861, 862, 860, 906, 983,
	1071, 45, 354, 1430, 1187, 1303, 579, 365, 366, 1304,
	1358, 590, 589, 599, 600, 592, 593, 594, 595, 596,
	597, 598, 591, 1425, 385, 601, 1347, 1244, 1189, 1381,
	1238, 837, 95, 599, 600, 592, 593, 594, 595, 596,
	597, 598, 591, 1237, 1191, 601, 1195, 995, 1190, 996,
	1188, 849, 851, 852, 1117, 1193, 94, 850, 610, 612,
	1439, 1116, 562, 53, 364, 1192, 223, 1039, 1040, 1041,
	655, 99, 1115, 859, 99, 359, 223, 669, 1194, 1196,
	218, 651, 1140, 1112, 621, 668, 1107, 624, 625, 626,
	627, 628, 629, 630, 353, 633, 635, 635, 635, 635,
	635, 635, 635, 635, 643, 644, 645, 646, 880, 393,
	881, 82, 1139, 663, 1106, 673, 671, 1105, 89, 1138,
	664, 1013, 786, 787, 788, 789, 792, 793, 794, 1012,
	471, 1005, 387, 474, 1064, 1411, 1318, 1236, 797, 798,
	799, 693, 1136, 1119, 653, 1226, 747, 611, 567, 1137,
	578, 577, 679, 678, 99, 1225, 1120, 1113, 687, 652,
	1109, 99, 99, 582, 1108, 1359, 806, 579, 749, 1100,
	99, 1431, 1135, 1118, 832, 636, 637, 638, 639, 640,
	641, 642, 590, 589, 599, 600, 592, 593, 594, 595,
	596, 597, 598, 591, 567, 857, 601, 649, 650, 1033,
	1032, 632, 810, 1010, 1065, 592, 593, 594, 595, 596,
	597, 598, 591, 802, 803, 601, 992, 83, 1371, 93,
	91, 223, 81, 1241, 88, 885, 1312, 218, 594, 595,
	596, 597, 598, 591, 223, 976, 601, 1173, 907, 1170,
	893, 690, 578, 577, 578, 577, 1434, 399, 581, 1114,
	1240, 1203, 1308, 1406, 84, 92, 86, 87, 90, 579,
	943, 579, 843, 50, 895, 223, 669, 882, 897, 930,
	1308, 1374, 399, 926, 668, 624, 547, 923, 1369, 399,
	223, 910, 1308, 1349, 218, 1308, 1348, 548, 549, 551,
	546, 931, 883, 884, 353, 580, 557, 558, 545, 363,
	903, 425, 424, 426, 427, 428, 429, 1352, 928, 1306,
	430, 578, 577, 927, 1305, 50, 1154, 914, 842, 896,
	913, 1272, 399, 858, 1308, 399, 935, 932, 579, 1052,
	399, 908, 1162, 1161, 944, 846, 847, 1083, 853, 854,
	1158, 1159, 1158, 1157, 1121, 945, 946, 938, 1080, 937,
	57, 481, 950, 24, 955, 956, 957, 958, 959, 24,
	947, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 677, 898, 899, 1087, 399, 902,
	842, 399, 567, 493, 492, 900, 901, 615, 616, 617,
	618, 619, 620, 909, 1272, 911, 912, 1215, 665, 922,
	1052, 932, 1052, 1160, 1052, 461, 1006, 1007, 920, 830,
	53, 1362, 683, 99, 99, 99, 53, 24, 681, 647,
	982, 475, 1276, 1279, 1280, 1281, 1277, 932, 1278, 1282,
	195, 99, 1363, 989, 53, 936, 590, 589, 599, 600,
	592, 593, 594, 595, 596, 597, 598, 591, 1351, 785,
	601, 661, 1301, 1011, 805, 662, 1276, 1279, 1280, 1281,
	1277, 1235, 1278, 1282, 1232, 1021, 1016, 810, 1014, 1227,
	67, 857, 801, 796, 53, 795, 1047, 74, 922, 814,
	813, 831, 812, 553, 22, 1330, 1328, 53, 839, 840,
	1331, 1329, 223, 659, 1365, 1035, 1056, 844, 1123, 1122,
	1332, 1364, 1280, 1281, 1327, 1326, 199, 200, 1042, 1432,
	1416, 1038, 845, 1399, 919, 918, 99, 1251, 467, 1409,
	1104, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 465, 1008, 401, 489, 472, 669, 746, 218,
	202, 1408, 1081, 193, 1059, 668, 353, 353, 811, 552,
	1284, 1070, 1092, 467, 1093, 1213, 855, 402, 1147, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 434, 1142, 895, 1082, 1049, 1102,
	1103, 1089, 1050, 1101, 196, 197, 1098, 1099, 1110, 1111,
	1090, 991, 990, 1061, 1062, 1063, 1034, 1144, 1067, 858,
	1036, 981, 1426, 1073, 1146, 1074, 1075, 1076, 1077, 1415,
	1230, 1414, 97, 1229, 1413, 190, 1231, 1321, 917, 491,
	1148, 490, 99, 1084, 1085, 1086, 916, 191, 57, 1320,
	353, 1271, 677, 560, 561, 556, 205, 1051, 204, 1292,
	1097, 993, 575, 1163, 1164, 59, 61, 54, 1, 344,
	1344, 808, 807, 1068, 204, 204, 223, 758, 757, 1412,
	1056, 223, 1172, 218, 1072, 218, 69, 1400, 1165, 1166,
	1167, 204, 1377, 1407, 1379, 1384, 893, 1356, 1185, 1175,
	1353, 99, 1174, 1355, 697, 567, 696, 1181, 223, 223,
	349, 1091, 1218, 1219, 926, 748, 1184, 1198, 1180, 1197,
	895, 1183, 764, 763, 1204, 762, 760, 1003, 1220, 782,
	1205, 1242, 1214, 769, 768, 691, 722, 721, 1200, 589,
	599, 600, 592, 593, 594, 595, 596, 597, 598, 591,
	1216, 1211, 601, 720, 927, 1223, 1224, 1217, 719, 718,
	1017, 1018, 1019, 717, 716, 776, 775, 1179, 715, 714,
	713, 712, 711, 710, 709, 772, 204, 708, 1030, 707,
	706, 705, 704, 703, 699, 702, 223, 223, 223, 1144,
	1248, 1248, 1248, 1233, 701, 1234, 1297, 204, 778, 700,
	204, 1249, 1250, 767, 765, 761, 498, 496, 497, 495,
	500, 777, 770, 499, 1221, 1222, 494, 1283, 771, 1287,
	1053, 1022, 815, 609, 915, 1150, 216, 939, 1256, 1257,
	682, 1258, 99, 99, 1260, 1259, 1262, 680, 207, 1210,
	206, 929, 648, 459, 1319, 1270, 926, 1069, 223, 1202,
	631, 779, 1248, 223, 1043, 1044, 1045, 1248, 1293, 904,
	412, 848, 1299, 1078, 423, 420, 422, 1300, 421, 654,
	1266, 774, 660, 583, 223, 404, 1144, 1336, 218, 1209,
	1302, 1294, 1286, 550, 373, 85, 927, 469, 50, 1309,
	1275, 1185, 1296, 99, 99, 99, 99, 1314, 1273, 1208,
	1254, 1323, 1255, 1325, 99, 1079, 555, 99, 1267, 1357,
	99, 658, 766, 1264, 1265, 1149, 223, 669, 25, 1333,
	1343, 58, 223, 1340, 773, 668, 1248, 201, 1341, 223,
	1322, 781, 1324, 1248, 780, 14, 1350, 21, 1354, 15,
	13, 12, 29, 1211, 1211, 1211, 1211, 1361, 10, 543,
	897, 9, 8, 7, 204, 204, 204, 1286, 6, 554,
	5, 4, 1307, 204, 204, 1310, 1311, 192, 23, 1168,
	1210, 2, 223, 1373, 20, 19, 1248, 18, 17, 16,
	11, 1269, 750, 1317, 1385, 1388, 1375, 1383, 1387, 751,
	1228, 0, 1398, 0, 0, 0, 0, 0, 1405, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 827, 0, 0, 0, 0, 223, 223, 223, 0,
	1420, 1420, 1420, 1421, 1422, 0, 0, 0, 1410, 0,
	1427, 1210, 1210, 1210, 1210, 0, 826, 1395, 1396, 1397,
	1177, 1178, 0, 0, 0, 1210, 0, 0, 0, 1424,
	1440, 1441, 0, 0, 1437, 223, 1428, 1429, 1176, 1443,
	1370, 0, 0, 829, 0, 204, 0, 670, 672, 0,
	0, 0, 825, 1389, 0, 0, 0, 0, 590, 589,
	599, 600, 592, 593, 594, 595, 596, 597, 598, 591,
	0, 0, 601, 0, 390, 0, 0, 0, 1360, 567,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	820, 816, 0, 819, 821, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 1435, 1436, 0,
	1393, 1394, 170, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 204, 204, 0, 0, 0,
	0, 0, 824, 0, 204, 0, 0, 0, 0, 1252,
	0, 0, 0, 1048, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 0, 174, 823, 176, 177, 0, 184,
	185, 186, 187, 590, 589, 599, 600, 592, 593, 594,
	595, 596, 597, 598, 591, 0, 0, 601, 0, 0,
	0, 0, 0, 0, 0, 0, 892, 672, 0, 0,
	892, 892, 0, 0, 892, 0, 370, 371, 0, 376,
	377, 378, 0, 380, 381, 382, 383, 384, 892, 892,
	892, 892, 0, 0, 818, 0, 0, 0, 0, 0,
	0, 0, 585, 892, 588, 828, 670, 0, 0, 1316,
	602, 603, 604, 605, 606, 607, 608, 817, 586, 587,
	584, 590, 589, 599, 600, 592, 593, 594, 595, 596,
	597, 598, 591, 0, 0, 601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 386, 0, 0, 388, 0,
	0, 0, 0, 392, 0, 394, 0, 143, 0, 101,
	0, 0, 125, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 887, 0, 408, 0, 0, 0, 117, 407,
	0, 0, 0, 0, 444, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 437, 438, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 457, 425, 424, 426,
	427, 428, 429, 0, 0, 107, 430, 431, 432, 0,
	0, 0, 405, 418, 0, 443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 204, 204,
	0, 0, 0, 0, 0, 415, 416, 890, 0, 0,
	0, 455, 0, 417, 0, 204, 414, 419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 453, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 160, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 158, 159,
	112, 163, 0, 0, 104, 0, 0, 142, 0, 157,
	0, 0, 892, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 892, 0,
	152, 0, 0, 123, 118, 156, 115, 137, 108, 102,
	204, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 670, 563, 672,
	564, 0, 565, 0, 568, 0, 0, 0, 572, 573,
	574, 0, 0, 0, 155, 0, 122, 445, 454, 451,
	452, 449, 450, 448, 447, 446, 456, 439, 440, 442,
	0, 441, 100, 105, 132, 0, 148, 121, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 153, 0, 154, 0, 0, 143, 128, 101, 0,
	756, 755, 0, 131, 0, 0, 754, 0, 0, 753,
	164, 165, 167, 166, 168, 106, 169, 117, 0, 0,
	0, 0, 0, 0, 133, 0, 204, 151, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 892, 0, 0,
	0, 0, 0, 672, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 752, 162,
	834, 835, 0, 0, 0, 841, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 122, 204, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	153, 0, 154, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 169, 0, 204, 204, 204,
	204, 0, 0, 0, 0, 0, 0, 0, 1334, 0,
	0, 204, 0, 0, 1290, 0, 0, 670, 0, 327,
	312, 272, 330, 248, 263, 342, 265, 266, 302, 232,
	282, 143, 261, 101, 0, 0, 125, 0, 131, 0,
	0, 0, 0, 328, 279, 0, 251, 225, 258, 226,
	249, 276, 117, 247, 314, 285, 264, 0, 336, 133,
	294, 0, 151, 136, 0, 0, 278, 317, 280, 311,
	271, 303, 240, 293, 331, 262, 299, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 1020, 107,
	296, 325, 260, 298, 301, 224, 295, 0, 228, 233,
	341, 323, 254, 255, 0, 1031, 0, 0, 0, 0,
	0, 277, 281, 308, 269, 0, 0, 1037, 0, 0,
	0, 0, 0, 252, 0, 292, 0, 0, 0, 235,
	230, 275, 0, 0, 0, 239, 0, 253, 309, 0,
	0, 0, 318, 270, 162, 324, 268, 267, 332, 305,
	0, 315, 250, 259, 111, 257, 149, 300, 160, 103,
	321, 316, 290, 273, 274, 229, 0, 307, 116, 124,
	246, 297, 158, 159, 112, 163, 234, 338, 104, 221,
	337, 142, 220, 157, 322, 291, 287, 231, 320, 289,
	286, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 227, 0, 152, 329, 343, 123, 118, 156,
	115, 137, 108, 102, 237, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 319, 0, 0, 0, 0, 0, 155, 236,
	122, 243, 244, 241, 242, 283, 284, 333, 334, 335,
	310, 238, 0, 0, 313, 288, 100, 105, 132, 340,
	148, 121, 161, 0, 0, 0, 0, 0, 256, 339,
	306, 304, 326, 0, 120, 153, 0, 154, 209, 0,
	0, 214, 212, 213, 217, 1169, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 167, 166, 168, 106,
	169, 327, 312, 272, 330, 248, 263, 342, 265, 266,
	302, 232, 282, 143, 261, 101, 0, 0, 125, 0,
	131, 0, 0, 0, 0, 328, 279, 0, 251, 225,
	258, 226, 249, 276, 117, 247, 314, 285, 264, 0,
	336, 133, 294, 0, 151, 136, 0, 0, 278, 317,
	280, 311, 271, 303, 240, 293, 331, 262, 299, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 296, 325, 260, 298, 301, 224, 295, 0,
	228, 233, 341, 323, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 277, 281, 308, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 252, 0, 292, 0, 0,
	0, 235, 230, 275, 0, 0, 0, 239, 0, 253,
	309, 0, 0, 0, 318, 270, 162, 324, 268, 267,
	332, 305, 0, 315, 250, 259, 111, 257, 149, 300,
	160, 103, 321, 316, 290, 273, 274, 229, 0, 307,
	116, 124, 246, 297, 158, 159, 112, 163, 234, 338,
	104, 221, 337, 142, 220, 157, 322, 291, 287, 231,
	320, 289, 286, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 227, 0, 152, 329, 343, 123,
	118, 156, 115, 137, 108, 102, 237, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 319, 0, 0, 0, 0, 0,
	155, 236, 122, 243, 244, 241, 242, 283, 284, 333,
	334, 335, 310, 238, 0, 0, 313, 288, 100, 105,
	132, 340, 148, 121, 161, 0, 0, 0, 0, 0,
	256, 339, 306, 304, 326, 0, 120, 153, 0, 154,
	0, 0, 0, 214, 212, 213, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 167, 166,
	168, 106, 169, 327, 312, 272, 330, 248, 263, 342,
	265, 266, 302, 232, 282, 143, 261, 101, 0, 0,
	125, 0, 131, 0, 0, 0, 0, 328, 279, 0,
	251, 225, 258, 226, 249, 276, 117, 247, 314, 285,
	264, 0, 336, 133, 294, 0, 151, 136, 0, 0,
	278, 317, 280, 311, 271, 303, 240, 293, 331, 262,
	299, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 296, 325, 260, 298, 301, 224,
	295, 0, 228, 233, 341, 323, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 277, 281, 308, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 252, 0, 292,
	0, 0, 0, 235, 230, 275, 0, 0, 0, 239,
	0, 253, 309, 0, 0, 0, 318, 270, 162, 324,
	268, 267, 332, 305, 0, 315, 250, 259, 111, 257,
	149, 300, 160, 103, 321, 316, 290, 273, 274, 229,
	0, 307, 116, 124, 246, 297, 158, 159, 112, 163,
	234, 338, 104, 221, 337, 142, 220, 157, 322, 291,
	287, 231, 320, 289, 286, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 227, 0, 152, 329,
	343, 123, 118, 156, 115, 137, 108, 102, 237, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 319, 0, 0, 0,
	0, 0, 155, 236, 122, 243, 244, 241, 242, 283,
	284, 333, 334, 335, 310, 238, 0, 0, 313, 288,
	100, 105, 132, 340, 148, 121, 161, 0, 0, 0,
	0, 0, 256, 339, 306, 304, 326, 0, 120, 153,
	0, 154, 482, 0, 0, 128, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	167, 166, 168, 106, 169, 327, 312, 272, 330, 248,
	263, 342, 265, 266, 302, 232, 282, 143, 261, 101,
	0, 0, 125, 0, 131, 0, 0, 0, 0, 328,
	279, 0, 251, 225, 258, 226, 249, 276, 117, 247,
	314, 285, 264, 0, 336, 133, 294, 0, 151, 136,
	0, 0, 278, 317, 280, 311, 271, 303, 240, 293,
	331, 262, 299, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 296, 325, 260, 298,
	301, 224, 295, 0, 228, 233, 341, 323, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 277, 281, 308,
	269, 0, 0, 0, 0, 0, 0, 1313, 0, 252,
	0, 292, 0, 0, 0, 235, 230, 275, 0, 0,
	0, 239, 0, 253, 309, 0, 0, 0, 318, 270,
	162, 324, 268, 267, 332, 305, 0, 315, 250, 259,
	111, 257, 149, 300, 160, 103, 321, 316, 290, 273,
	274, 229, 0, 307, 116, 124, 246, 297, 158, 159,
	112, 163, 234, 338, 104, 674, 337, 142, 675, 157,
	322, 291, 287, 231, 320, 289, 286, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 227, 0,
	152, 329, 343, 123, 118, 156, 115, 137, 108, 102,
	237, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 319, 0,
	0, 0, 0, 0, 155, 236, 122, 243, 244, 241,
	242, 283, 284, 333, 334, 335, 310, 238, 0, 0,
	313, 288, 100, 105, 132, 340, 148, 121, 161, 0,
	0, 0, 0, 0, 256, 339, 306, 304, 326, 0,
	120, 153, 0, 154, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 167, 166, 168, 106, 169, 327, 312, 272,
	330, 248, 263, 342, 265, 266, 302, 232, 282, 143,
	261, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 328, 279, 0, 251, 225, 258, 226, 249, 276,
	117, 247, 314, 285, 264, 0, 336, 133, 294, 0,
	151, 136, 0, 0, 278, 317, 280, 311, 271, 303,
	240, 293, 331, 262, 299, 0, 0, 0, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 296, 325,
	260, 298, 301, 224, 295, 0, 228, 233, 341, 323,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 277,
	281, 308, 269, 0, 0, 0, 0, 0, 0, 1182,
	0, 252, 0, 292, 0, 0, 0, 235, 230, 275,
	0, 0, 0, 239, 0, 253, 309, 0, 0, 0,
	318, 270, 162, 324, 268, 267, 332, 305, 0, 315,
	250, 259, 111, 257, 149, 300, 160, 103, 321, 316,
	290, 273, 274, 229, 0, 307, 116, 124, 246, 297,
	158, 159, 112, 163, 234, 338, 104, 674, 337, 142,
	675, 157, 322, 291, 287, 231, 320, 289, 286, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	227, 0, 152, 329, 343, 123, 118, 156, 115, 137,
	108, 102, 237, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	319, 0, 0, 0, 0, 0, 155, 236, 122, 243,
	244, 241, 242, 283, 284, 333, 334, 335, 310, 238,
	0, 0, 313, 288, 100, 105, 132, 340, 148, 121,
	161, 0, 0, 0, 0, 0, 256, 339, 306, 304,
	326, 0, 120, 153, 0, 154, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 327,
	312, 272, 330, 248, 263, 342, 265, 266, 302, 232,
	282, 143, 261, 101, 0, 0, 125, 0, 131, 0,
	0, 0, 0, 328, 279, 0, 251, 225, 258, 226,
	249, 276, 117, 247, 314, 285, 264, 0, 336, 133,
	294, 0, 151, 136, 0, 0, 278, 317, 280, 311,
	271, 303, 240, 293, 331, 262, 299, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	296, 325, 260, 298, 301, 224, 295, 0, 228, 233,
	341, 323, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 277, 281, 308, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 252, 0, 292, 0, 0, 0, 235,
	230, 275, 0, 0, 0, 239, 0, 253, 309, 0,
	0, 0, 318, 270, 162, 324, 268, 267, 332, 305,
	0, 315, 250, 259, 111, 257, 149, 300, 160, 103,
	321, 316, 290, 273, 274, 229, 0, 307, 116, 124,
	246, 297, 158, 159, 112, 163, 234, 338, 104, 221,
	337, 142, 220, 157, 322, 291, 287, 231, 320, 289,
	286, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 227, 0, 152, 329, 343, 123, 118, 156,
	115, 137, 108, 102, 237, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 319, 0, 0, 0, 0, 0, 155, 236,
	122, 243, 244, 241, 242, 283, 284, 333, 334, 335,
	310, 238, 0, 0, 313, 288, 100, 105, 132, 340,
	148, 121, 161, 0, 0, 0, 0, 0, 256, 339,
	306, 304, 326, 0, 120, 153, 0, 154, 0, 0,
	0, 128, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 167, 166, 168, 106,
	169, 327, 312, 272, 330, 248, 263, 342, 265, 266,
	302, 232, 282, 143, 261, 101, 0, 0, 125, 0,
	131, 0, 0, 0, 0, 328, 279, 0, 251, 225,
	258, 226, 249, 276, 117, 247, 314, 285, 264, 0,
	336, 133, 294, 0, 151, 136, 0, 0, 278, 317,
	280, 311, 271, 303, 240, 293, 331, 262, 299, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 296, 325, 260, 298, 301, 224, 295, 0,
	228, 233, 341, 323, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 277, 281, 308, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 252, 0, 292, 0, 0,
	0, 235, 230, 275, 0, 0, 0, 239, 0, 253,
	309, 0, 0, 0, 318, 270, 162, 324, 268, 267,
	332, 305, 0, 315, 250, 259, 111, 257, 149, 300,
	160, 103, 321, 316, 290, 273, 274, 229, 0, 307,
	116, 124, 246, 297, 158, 159, 112, 163, 234, 338,
	104, 674, 337, 142, 675, 157, 322, 291, 287, 231,
	320, 289, 286, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 227, 0, 152, 329, 343, 123,
	118, 156, 115, 137, 108, 102, 237, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 319, 0, 0, 0, 0, 0,
	155, 236, 122, 243, 244, 241, 242, 283, 284, 333,
	334, 335, 310, 238, 0, 0, 313, 288, 100, 105,
	132, 340, 148, 121, 161, 0, 0, 0, 0, 0,
	256, 339, 306, 304, 326, 0, 120, 153, 0, 154,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 167, 166,
	168, 106, 169, 327, 312, 272, 330, 248, 263, 342,
	265, 266, 302, 232, 282, 143, 261, 101, 0, 0,
	125, 0, 131, 0, 0, 0, 0, 328, 279, 0,
	251, 225, 258, 226, 249, 276, 117, 247, 314, 285,
	264, 0, 336, 133, 294, 0, 151, 136, 0, 0,
	278, 317, 280, 311, 271, 303, 240, 293, 331, 262,
	299, 0, 0, 0, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 296, 325, 260, 298, 301, 224,
	295, 0, 228, 233, 341, 323, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 277, 281, 308, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 252, 0, 292,
	0, 0, 0, 235, 230, 275, 0, 0, 0, 239,
	0, 253, 309, 0, 0, 0, 318, 270, 162, 324,
	268, 267, 332, 305, 0, 315, 250, 259, 111, 257,
	149, 300, 160, 103, 321, 316, 290, 273, 274, 229,
	0, 307, 116, 124, 246, 297, 158, 159, 112, 163,
	234, 338, 104, 674, 337, 142, 675, 157, 322, 291,
	287, 231, 320, 289, 286, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 227, 0, 152, 329,
	343, 123, 118, 156, 115, 137, 108, 102, 237, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 319, 0, 0, 0,
	0, 0, 155, 236, 122, 243, 244, 241, 242, 283,
	284, 333, 334, 335, 310, 238, 0, 0, 313, 288,
	100, 105, 132, 340, 148, 121, 161, 0, 0, 0,
	0, 0, 256, 339, 306, 304, 326, 0, 120, 153,
	0, 154, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	167, 166, 168, 106, 169, 327, 312, 272, 330, 248,
	263, 342, 265, 266, 302, 232, 282, 143, 261, 101,
	0, 0, 125, 0, 131, 0, 0, 0, 0, 328,
	279, 0, 251, 225, 258, 226, 249, 276, 117, 247,
	314, 285, 264, 0, 336, 133, 294, 0, 151, 136,
	0, 0, 278, 317, 280, 311, 271, 303, 240, 293,
	331, 262, 299, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 296, 325, 260, 298,
	301, 224, 295, 0, 228, 233, 341, 323, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 277, 281, 308,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 252,
	0, 292, 0, 0, 0, 235, 230, 275, 0, 0,
	0, 239, 0, 253, 309, 0, 0, 0, 318, 270,
	162, 324, 268, 267, 332, 305, 0, 315, 250, 259,
	111, 257, 149, 300, 160, 103, 321, 316, 290, 273,
	274, 229, 0, 307, 116, 124, 246, 297, 158, 159,
	112, 163, 234, 338, 104, 674, 337, 142, 675, 157,
	322, 291, 287, 231, 320, 289, 286, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 227, 0,
	152, 329, 343, 123, 118, 156, 115, 137, 108, 102,
	237, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 319, 0,
	0, 0, 0, 0, 155, 236, 122, 243, 244, 241,
	242, 283, 284, 333, 334, 335, 310, 238, 0, 0,
	313, 288, 100, 105, 132, 340, 148, 121, 161, 0,
	0, 0, 0, 0, 256, 339, 306, 304, 326, 0,
	120, 153, 0, 154, 0, 0, 0, 128, 0, 0,
	143, 0, 101, 0, 0, 125, 0, 131, 0, 0,
	164, 165, 167, 166, 168, 106, 169, 408, 0, 0,
	0, 117, 407, 0, 0, 0, 0, 444, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 437, 438, 0,
	0, 0, 0, 0, 0, 688, 53, 0, 0, 457,
	425, 424, 426, 427, 428, 429, 0, 0, 107, 430,
	431, 432, 689, 0, 0, 405, 418, 0, 443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 415, 416,
	0, 0, 0, 0, 455, 0, 417, 0, 0, 414,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 453, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 160, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 158, 159, 112, 163, 0, 0, 104, 0, 0,
	142, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 156, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 122,
	445, 454, 451, 452, 449, 450, 448, 447, 446, 456,
	439, 440, 442, 0, 441, 100, 105, 132, 0, 148,
	121, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 153, 0, 154, 0, 0, 0,
	128, 0, 0, 143, 0, 101, 0, 0, 125, 0,
	131, 0, 0, 164, 165, 167, 166, 168, 106, 169,
	408, 0, 0, 0, 117, 407, 0, 0, 0, 0,
	444, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	437, 438, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 457, 425, 424, 426, 427, 428, 429, 0,
	0, 107, 430, 431, 432, 0, 0, 0, 405, 418,
	0, 443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 415, 416, 890, 0, 0, 0, 455, 0, 417,
	0, 0, 414, 419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 453,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	160, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 158, 159, 112, 163, 0, 0,
	104, 0, 0, 142, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 0, 0, 152, 0, 0, 123,
	118, 156, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 122, 445, 454, 451, 452, 449, 450, 448,
	447, 446, 456, 439, 440, 442, 0, 441, 100, 105,
	132, 0, 148, 121, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 153, 0, 154,
	0, 0, 0, 128, 0, 0, 143, 0, 101, 0,
	0, 125, 0, 131, 0, 0, 164, 165, 167, 166,
	168, 106, 169, 408, 0, 0, 0, 117, 407, 0,
	0, 0, 0, 444, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 437, 438, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 399, 457, 425, 424, 426, 427,
	428, 429, 0, 0, 107, 430, 431, 432, 0, 0,
	0, 405, 418, 0, 443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 415, 416, 0, 0, 0, 0,
	455, 0, 417, 0, 0, 414, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 453, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 122, 445, 454, 451, 452,
	449, 450, 448, 447, 446, 456, 439, 440, 442, 0,
	441, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 24, 120,
	153, 0, 154, 0, 0, 0, 128, 0, 0, 143,
	0, 101, 0, 0, 125, 0, 131, 0, 0, 164,
	165, 167, 166, 168, 106, 169, 408, 0, 0, 0,
	117, 407, 0, 0, 0, 0, 444, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 437, 438, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 457, 425,
	424, 426, 427, 428, 429, 0, 0, 107, 430, 431,
	432, 0, 0, 0, 405, 418, 0, 443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 415, 416, 0,
	0, 0, 0, 455, 0, 417, 0, 0, 414, 419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 453, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 160, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	158, 159, 112, 163, 0, 0, 104, 0, 0, 142,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 156, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 122, 445,
	454, 451, 452, 449, 450, 448, 447, 446, 456, 439,
	440, 442, 0, 441, 100, 105, 132, 0, 148, 121,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 153, 0, 154, 0, 0, 0, 128,
	0, 0, 143, 0, 101, 0, 0, 125, 0, 131,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 408,
	0, 0, 0, 117, 407, 0, 0, 0, 0, 444,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 437,
	438, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 457, 425, 424, 426, 427, 428, 429, 0, 0,
	107, 430, 431, 432, 0, 0, 0, 405, 418, 0,
	443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	415, 416, 0, 0, 0, 0, 455, 0, 417, 0,
	0, 414, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 453, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 160,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 158, 159, 112, 163, 0, 0, 104,
	0, 0, 142, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	156, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 122, 445, 454, 451, 452, 449, 450, 448, 447,
	446, 456, 439, 440, 442, 0, 441, 100, 105, 132,
	0, 148, 121, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 153, 0, 154, 0,
	0, 143, 128, 101, 0, 0, 125, 0, 131, 0,
	0, 0, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 169, 117, 0, 0, 0, 0, 0, 444, 133,
	0, 0, 151, 136, 0, 0, 0, 0, 437, 438,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	457, 425, 424, 426, 427, 428, 429, 0, 0, 107,
	430, 431, 432, 0, 0, 0, 0, 418, 0, 443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 415,
	416, 0, 0, 0, 0, 455, 0, 417, 0, 0,
	414, 419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 453, 0, 0,
	0, 0, 0, 0, 111, 0, 149, 0, 160, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 124,
	0, 0, 158, 159, 112, 163, 0, 0, 104, 0,
	0, 142, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 0, 0, 152, 0, 0, 123, 118, 156,
	115, 137, 108, 102, 0, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	122, 445, 454, 451, 452, 449, 450, 448, 447, 446,
	456, 439, 440, 442, 0, 441, 100, 105, 132, 0,
	148, 121, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 153, 0, 154, 0, 0,
	143, 128, 101, 0, 0, 125, 0, 131, 0, 0,
	0, 0, 0, 0, 164, 165, 167, 166, 168, 106,
	169, 117, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 589, 599, 600, 592, 593,
	594, 595, 596, 597, 598, 591, 0, 0, 601, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 160, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 158, 159, 112, 163, 0, 0, 104, 0, 0,
	142, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 156, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 0, 0, 0,
	143, 0, 101, 0, 0, 125, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 1055, 155, 0, 122,
	0, 117, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 151, 136, 0, 0, 100, 105, 132, 0, 148,
	121, 161, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 1057, 0, 120, 153, 0, 154, 0, 107, 0,
	128, 0, 0, 578, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 167, 166, 168, 106, 169,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 160, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 158, 159, 112, 163, 0, 0, 104, 0, 0,
	142, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 156, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 24, 129,
	135, 138, 144, 145, 150, 0, 0, 0, 0, 143,
	0, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 122,
	117, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	151, 136, 0, 0, 0, 100, 105, 132, 0, 148,
	121, 161, 0, 0, 0, 53, 0, 0, 98, 0,
	0, 0, 0, 120, 153, 0, 154, 107, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 167, 166, 168, 106, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 160, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	158, 159, 112, 163, 0, 0, 104, 0, 0, 142,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 156, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 143, 0, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 1289, 0, 0, 0, 155, 117, 122, 0,
	0, 0, 0, 0, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	161, 0, 0, 0, 0, 98, 0, 1291, 0, 0,
	0, 0, 120, 153, 107, 154, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 24, 129, 135, 138, 144, 145,
	150, 0, 0, 0, 0, 143, 0, 101, 0, 0,
	125, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 122, 117, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 151, 136, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 53, 0, 0, 222, 0, 0, 0, 0, 120,
	153, 0, 154, 107, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 160, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 158, 159, 112, 163,
	0, 0, 104, 0, 0, 142, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 0, 0, 152, 0,
	0, 123, 118, 156, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 143, 0, 101, 0, 0, 125, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 117, 122, 0, 0, 0, 0, 0,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 0,
	100, 105, 132, 0, 148, 121, 161, 0, 0, 0,
	0, 222, 0, 0, 656, 0, 0, 657, 120, 153,
	107, 154, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	167, 166, 168, 106, 169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 160,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 158, 159, 112, 163, 0, 0, 104,
	0, 0, 142, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	156, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 143, 0, 101, 0, 0, 125, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 122, 117, 487, 0, 0, 0, 0, 0, 133,
	0, 0, 151, 136, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 161, 0, 0, 0, 0, 0, 0,
	222, 0, 486, 0, 0, 120, 153, 0, 154, 107,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 149, 0, 160, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 124,
	0, 0, 158, 159, 112, 163, 0, 0, 104, 0,
	0, 142, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 0, 0, 152, 0, 0, 123, 118, 156,
	115, 137, 108, 102, 0, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 143, 0,
	101, 0, 0, 125, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 117,
	122, 0, 0, 0, 0, 0, 133, 0, 0, 151,
	136, 0, 0, 0, 0, 0, 100, 105, 132, 0,
	148, 121, 161, 0, 0, 0, 0, 98, 0, 1291,
	0, 0, 0, 0, 120, 153, 107, 154, 0, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 167, 166, 168, 106,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 160, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 158,
	159, 112, 163, 0, 0, 104, 0, 0, 142, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 0,
	0, 152, 0, 0, 123, 118, 156, 115, 137, 108,
	102, 0, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 143, 0, 101, 0, 0,
	125, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 117, 122, 0, 0,
	0, 0, 0, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 0, 100, 105, 132, 0, 148, 121, 161,
	0, 53, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 120, 153, 107, 154, 0, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 167, 166, 168, 106, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 160, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 158, 159, 112, 163,
	0, 0, 104, 0, 0, 142, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 0, 0, 152, 0,
	0, 123, 118, 156, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 143, 0, 101, 0, 0, 125, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 117, 122, 0, 0, 0, 0, 0,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 0,
	100, 105, 132, 0, 148, 121, 161, 0, 0, 0,
	0, 222, 0, 1057, 0, 0, 0, 0, 120, 153,
	107, 154, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	167, 166, 168, 106, 169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 160,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 158, 159, 112, 163, 0, 0, 104,
	0, 0, 142, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	156, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 143, 0, 101, 0, 0, 125, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 122, 470, 117, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 151, 136, 0, 0, 100, 105, 132,
	0, 148, 121, 161, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 120, 153, 0, 154, 0,
	107, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 160,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 158, 159, 112, 163, 0, 0, 104,
	0, 0, 142, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	156, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 143,
	0, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	117, 122, 0, 0, 0, 0, 0, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 161, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 120, 153, 107, 154, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 160, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	158, 159, 112, 163, 0, 0, 104, 0, 0, 142,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 156, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 143, 0, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 117, 122, 0,
	0, 0, 0, 0, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	161, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	0, 0, 120, 153, 107, 154, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 143, 0, 101, 0, 0, 125, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 117, 122, 0, 0, 0, 0,
	0, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 120,
	153, 107, 154, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	160, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 158, 159, 112, 163, 0, 0,
	104, 0, 0, 142, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 0, 0, 152, 0, 0, 123,
	118, 156, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	143, 0, 101, 0, 0, 125, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 117, 122, 0, 0, 0, 0, 0, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 0, 100, 105,
	132, 0, 148, 121, 161, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 120, 153, 107, 154,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 167, 166,
	168, 106, 169, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 160, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 158, 159, 112, 163, 0, 0, 104, 0, 0,
	142, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 156, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 143, 0, 101,
	0, 0, 125, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 117, 122,
	0, 0, 0, 0, 0, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 0, 100, 105, 132, 0, 148,
	121, 161, 0, 0, 0, 0, 1141, 0, 0, 0,
	0, 0, 0, 120, 153, 107, 154, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 167, 166, 168, 106, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 160, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 158, 159,
	112, 163, 0, 0, 104, 0, 0, 142, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 0, 0,
	152, 0, 0, 123, 118, 156, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 105, 132, 0, 148, 121, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 153, 0, 154, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 167, 166, 168, 106, 169,
}
var yyPact = [...]int{

	111, -1000, -211, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1014, 1040, -1000, -1000, -1000, -1000, -1000, 807,
	115, 52, 67, 86, 85, 390, 84, 9006, -1000, -1000,
	72, -1000, -166, -1000, -1000, -179, -1000, -1000, -1000, -1000,
	747, -1000, -1000, -1000, -1000, -1000, 999, 1012, 824, 953,
	856, -1000, 52, 9006, 1026, 2264, -137, 9203, 54, 81,
	75, 68, 54, -1000, 77, -1000, 50, 633, 50, 9006,
	9006, -85, 22, -1000, -1000, -73, -1000, -1000, -1000, -91,
	-1000, -1000, -1000, -1000, -1000, -1000, 9006, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 463, -1000, -1000, -1000, -1000, 771, 771,
	-1000, 9006, -1000, -191, -1000, -1000, -1000, -1000, 607, 916,
	5915, 5915, 1014, -1000, 747, -1000, -1000, -1000, 886, -1000,
	-1000, 314, 8415, 896, 163, 9006, 757, -1000, -1000, -181,
	2848, -1000, -1000, -1000, -1000, 264, 7624, 7624, -1000, -1000,
	-1000, 895, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1006, 1004, 719,
	-1000, 140, -1000, -1000, 9006, 285, 632, 624, 610, 9006,
	9006, 9006, 915, 821, 9006, -1000, -1000, 1025, 9006, 9006,
	-1000, -1000, 1023, 1024, -1000, -1000, -1000, -1000, -1000, 1023,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5915, -1000, -1000, 206, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1034, 233, 631, -1000, 5915, 1550, 771, 771, -1000,
	-1000, 139, -1000, -1000, 6174, 6174, 6174, 6174, 6174, 6174,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 771, 144, -1000, 5652, 771, 771, 771,
	771, 771, 771, 5915, 771, 771, 771, 771, 771, 771,
	771, 771, 771, 771, 771, 771, 771, -1000, -1000, 755,
	-1000, 562, 999, 607, 856, 7425, 840, -1000, -1000, 811,
	9006, -1000, 8809, 4600, 1021, 2556, -1000, 754, 748, -178,
	-193, -1000, -181, 4863, -1000, -1000, -1000, -1000, 169, -1000,
	771, 98, 64, 1949, 1116, -30, -1000, -1000, -1000, 786,
	-1000, 786, 786, 786, 786, 0, 0, 0, 0, -1000,
	-1000, -1000, -1000, -1000, 812, 810, -1000, 786, 786, 786,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 809, 809,
	809, 791, 791, 899, 914, 820, 818, 817, -1000, 1377,
	745, -1000, -1000, 9006, -1000, 999, -88, -1000, -1000, 333,
	9006, 9006, -1000, -1000, -1000, -1000, 716, 295, -1000, 9006,
	-1000, -1000, -1000, -1000, -1000, -1000, 864, 5915, 5915, 375,
	5915, 5915, 243, 6174, 400, 297, 6174, 6174, 6174, 6174,
	6174, 6174, 6174, 6174, 6174, 6174, 6174, 6174, 6174, 6174,
	6174, 442, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	601, -1000, 747, 634, 634, 168, 168, 168, 168, 168,
	6433, 1690, 4308, 607, 5652, 5126, 5126, 5915, 5915, 5126,
	921, 280, 295, 8612, -1000, 607, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5126, 5126, 5126, 5126, 5915, -1000, -1000,
	-1000, 916, -1000, 921, 1008, -1000, 871, 870, 5126, -1000,
	816, 8809, 771, -1000, 7228, -1000, 763, -1000, 262, -1000,
	143, -1000, -1000, -1000, -1000, -1000, 1014, 5915, -1000, 3724,
	-1000, -187, -1000, -175, -196, -1000, -1000, -1000, -1000, -1000,
	295, -1000, 594, 9203, 771, 771, -1000, 64, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 256, 256, 55, 256, 256, 256, 256,
	256, -44, -45, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, -1000, -1000, -1000, 569,
	210, 173, -1000, -1000, -1000, -1000, 973, -1000, 1116, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 323, 131, -1000, 962, -1000, 961, 548, 1033, 381,
	142, 134, -32, -1000, -1000, 462, 0, 0, -1000, -1000,
	-1000, 893, -1000, -1000, -1000, 535, 535, -1000, -1000, -1000,
	-1000, 460, -1000, -1000, -1000, 452, -1000, -1000, 899, -1000,
	51, -1000, 9006, 9006, 9006, -1000, 214, 257, 57, 41,
	39, 36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9006, -1000, -1000, 532, -1000, -1000, -1000, 531, 5915, -1000,
	333, -1000, 5915, -1000, -1000, 862, 243, 282, -1000, -1000,
	391, -1000, -1000, 295, 295, 481, -1000, -1000, -1000, -1000,
	400, 6174, 6174, 6174, 735, 481, 1472, 330, 1017, 168,
	521, 521, 226, 226, 226, 226, 226, 500, 500, -1000,
	-1000, -1000, 607, -1000, -1000, -1000, 607, 5126, 740, -1000,
	-1000, 6633, 133, 771, 128, -1000, -1000, 607, 665, 665,
	470, 309, 665, 5126, 312, -1000, 5915, 607, -1000, 665,
	607, 665, 665, -1000, -1000, 9006, -1000, -1000, -1000, -1000,
	738, -1000, 904, 737, 673, -1000, -1000, 5389, 607, 713,
	119, 1014, 8809, 5915, 4308, 999, 295, -1000, -1000, -1000,
	-194, -189, -1000, -1000, 607, 9203, 9203, -1000, 501, -1000,
	381, 256, 256, -1000, 880, 448, 445, 417, 496, 492,
	256, 256, 414, 489, 583, 403, 392, 385, 504, 488,
	705, 503, 480, 443, 9400, 45, -1000, 569, -1000, 928,
	210, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -89, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 651, -1000, -1000, 266, 678,
	-1000, 676, 739, 668, -1000, 256, 256, 771, 771, 771,
	-1000, 9006, -1000, -1000, -1000, 573, -1, 807, 571, 9203,
	-1000, -1000, -1000, -1000, 295, -1000, 295, -1000, -1000, -1000,
	-1000, -1000, -1000, 735, 481, 1357, -1000, 6174, 6174, -1000,
	-1000, 665, 5126, -1000, -1000, 8215, -1000, -1000, 3432, 5126,
	4016, -1000, -1000, -1000, 288, 442, 288, -119, 736, 275,
	-1000, 5915, 564, -1000, -1000, -1000, -1000, -1000, -1000, 1021,
	8018, 925, -1000, 771, -1000, -1000, 753, 8612, 8612, 999,
	-1000, 295, -1000, -1000, -1000, -1000, -1000, -1000, 607, 607,
	-1000, -1000, 381, 381, -1000, -1000, -1000, -1000, -1000, -1000,
	487, 477, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 806, -1000, 990, 801, 45, 569, -1000,
	798, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 469, -1000,
	374, -1000, 361, 584, 311, 8612, 8612, 8612, -1000, -1000,
	-1000, 877, -1000, -1000, -1000, -1000, 6174, 481, 481, -1000,
	-1000, -1000, -1000, 113, 607, -1000, 607, 786, 786, -1000,
	786, 791, -1000, 786, 19, 786, 17, 607, 607, 771,
	-114, -1000, 295, 5915, 1019, 730, 804, -1000, -1000, -1000,
	917, 6832, 7029, 1031, -1000, 771, -1000, 747, 110, -1000,
	-1000, 771, -150, -1000, -1000, -1000, -1000, 8612, -1000, -1000,
	-1000, -1000, 8612, 789, 45, 340, -1000, 649, 644, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 660, -1000, 786, 660,
	660, 560, 481, 3140, -1000, -1000, -1000, 102, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6174, 607, 468, 295,
	1016, 1002, 8018, 8018, 8018, 8018, -1000, 853, 852, -1000,
	834, 833, 848, 9006, -1000, 657, 6832, 125, -1000, 7821,
	-1000, -1000, 8809, 673, 607, 8612, -148, -1000, 357, 621,
	618, 8612, 785, -1000, 642, -1000, -1000, -1000, 8612, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 310, -1000, -1000, -1000,
	5915, 5915, 804, 749, 770, -1000, -1000, -1000, -1000, 849,
	-1000, 842, -1000, -1000, -1000, -1000, -1000, 65, 63, 62,
	-1000, 663, -1000, -1000, 614, -1000, 552, -1000, -1000, -1000,
	606, 8612, -1000, 217, -1000, 103, 354, 607, 76, -126,
	295, 654, 5915, 5915, -1000, -1000, 771, 771, 771, -148,
	-1000, 869, 101, 101, -1000, 588, 900, -1000, -1000, -1000,
	256, 467, 991, 900, -1000, -1000, 984, 900, -1000, -1000,
	861, -122, -133, 295, 295, 8612, 8612, 8612, -1000, 207,
	-1000, 256, -1000, 355, 977, 101, -1000, -1000, 256, 256,
	334, -1000, -1000, -1000, -1000, 505, -1000, 860, -1000, 582,
	-1000, 582, 582, 771, 302, -1000, 394, 101, 584, 584,
	-1000, -1000, -124, -1000, 8612, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -127, -1000, -134, -1000,
}
var yyPgo = [...]int{

	0, 21, 25, 1370, 1369, 1362, 26, 1360, 1359, 1358,
	1357, 1355, 1354, 1351, 43, 884, 1348, 1347, 1341, 1340,
	1338, 1333, 1332, 1331, 1328, 1322, 1321, 1320, 1319, 1317,
	1315, 198, 1307, 1301, 1298, 1295, 1292, 69, 1291, 79,
	1289, 1288, 1286, 35, 149, 36, 45, 157, 1285, 29,
	37, 7, 1279, 1278, 16, 1270, 327, 1267, 82, 1265,
	1264, 54, 1263, 1259, 1257, 6, 24, 1255, 60, 1253,
	1252, 78, 372, 1249, 1248, 1246, 1245, 1244, 1241, 47,
	5, 22, 10, 28, 1240, 138, 12, 1239, 46, 1230,
	1227, 1225, 1224, 49, 1223, 72, 1222, 18, 65, 1221,
	53, 15, 57, 1220, 1218, 71, 77, 75, 67, 1217,
	63, 1210, 1207, 156, 1206, 1205, 1204, 877, 1203, 385,
	402, 1202, 48, 1201, 41, 0, 4, 17, 31, 1200,
	40, 974, 42, 13, 1199, 1197, 1522, 33, 76, 30,
	1196, 1193, 1190, 1189, 1188, 1187, 1186, 20, 1185, 1184,
	1183, 1179, 1176, 1174, 1165, 1164, 1163, 1162, 1161, 1160,
	1159, 1157, 1154, 1153, 1152, 1151, 1150, 1149, 1148, 1144,
	1143, 1139, 1138, 1133, 1117, 1116, 19, 1115, 1114, 1113,
	32, 55, 27, 58, 1111, 1109, 1107, 73, 23, 1106,
	1105, 1103, 1102, 56, 52, 1095, 74, 39, 34, 1090,
	1086, 1084, 62, 9, 14, 1083, 11, 1080, 1077, 3,
	8, 1075, 1074, 1073, 1072, 1067, 1066, 1059, 1, 1058,
	1057, 61, 1052, 1051, 59, 2, 1050, 1049, 1048, 1047,
	50, 95, 1046, 128,
}
var yyR1 = [...]int{

	0, 228, 229, 229, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 14, 14, 14, 15, 16, 16, 17,
	17, 18, 18, 34, 34, 19, 20, 21, 21, 226,
	226, 225, 152, 152, 22, 22, 22, 22, 22, 227,
	227, 227, 227, 227, 227, 217, 217, 218, 218, 212,
	210, 210, 207, 207, 214, 214, 205, 205, 211, 211,
	208, 208, 206, 206, 213, 213, 222, 222, 223, 223,
	224, 224, 183, 183, 182, 182, 181, 181, 184, 184,
	184, 25, 198, 200, 200, 201, 201, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 154, 156, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 169, 170, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 172, 172, 173, 173, 174, 174, 175, 175, 157,
	180, 180, 155, 151, 153, 199, 199, 199, 194, 130,
	130, 140, 140, 140, 140, 219, 219, 220, 220, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 143,
	143, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	142, 142, 142, 142, 142, 144, 144, 144, 144, 144,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 146, 146, 146, 146, 146,
	146, 146, 146, 193, 193, 147, 147, 187, 187, 188,
	188, 188, 185, 185, 186, 186, 189, 189, 148, 148,
	148, 148, 148, 148, 36, 35, 35, 35, 115, 115,
	115, 190, 176, 176, 176, 150, 177, 177, 178, 178,
	178, 179, 179, 179, 191, 191, 192, 192, 149, 195,
	195, 195, 195, 6, 6, 215, 215, 215, 215, 209,
	209, 4, 4, 4, 1, 2, 2, 3, 3, 3,
	5, 5, 197, 197, 196, 196, 204, 204, 203, 23,
	23, 23, 23, 23, 23, 23, 23, 24, 24, 24,
	62, 62, 7, 26, 8, 9, 10, 10, 11, 11,
	11, 11, 12, 12, 12, 12, 12, 12, 12, 12,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 42, 42, 58, 58,
	59, 59, 60, 60, 61, 61, 61, 30, 28, 29,
	29, 29, 29, 232, 31, 32, 32, 33, 33, 33,
	39, 39, 39, 37, 37, 38, 38, 45, 45, 44,
	44, 46, 46, 46, 46, 129, 129, 129, 128, 128,
	48, 48, 49, 49, 50, 50, 51, 51, 51, 63,
	52, 52, 52, 52, 135, 135, 134, 134, 134, 133,
	133, 53, 53, 53, 53, 54, 54, 54, 54, 55,
	55, 57, 57, 56, 56, 64, 64, 64, 64, 65,
	65, 66, 66, 47, 47, 47, 47, 47, 47, 47,
	118, 118, 68, 68, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 78, 78, 78, 78, 78, 78,
	69, 69, 69, 69, 69, 69, 69, 43, 43, 79,
	79, 79, 85, 80, 80, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 76, 76, 76, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 75, 75, 75,
	75, 75, 75, 75, 75, 233, 233, 77, 77, 77,
	77, 40, 40, 40, 40, 40, 137, 137, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 89, 89, 41, 41, 87, 87, 88, 90, 90,
	86, 86, 86, 71, 71, 71, 71, 71, 71, 71,
	73, 73, 73, 91, 91, 92, 92, 93, 93, 94,
	94, 95, 96, 96, 96, 97, 97, 97, 97, 98,
	98, 98, 70, 70, 70, 70, 70, 70, 99, 99,
	99, 99, 100, 100, 81, 81, 83, 83, 82, 84,
	101, 101, 102, 103, 103, 106, 106, 105, 105, 105,
	105, 105, 114, 114, 113, 113, 113, 104, 104, 107,
	107, 111, 111, 110, 112, 112, 112, 112, 109, 109,
	108, 108, 138, 138, 138, 116, 116, 119, 119, 120,
	120, 117, 117, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 122, 122, 122, 123, 123, 216, 216,
	126, 126, 127, 127, 131, 131, 132, 132, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	230, 231, 136,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 3, 1,
	3, 5, 0, 2, 3, 5, 11, 11, 11, 0,
	1, 1, 5, 9, 7, 1, 1, 1, 1, 2,
	3, 2, 0, 2, 1, 1, 0, 2, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 1, 2,
	4, 4, 0, 1, 0, 1, 1, 2, 1, 1,
	1, 4, 4, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 4, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 3, 3, 4, 1, 3, 3, 3, 1,
	1, 3, 1, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 4, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 3, 4, 1, 1,
	1, 1, 0, 3, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 1, 2, 7,
	7, 8, 9, 0, 1, 3, 1, 2, 3, 0,
	2, 0, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 3, 2, 6,
	7, 7, 7, 9, 7, 7, 7, 4, 5, 4,
	1, 3, 3, 3, 2, 2, 3, 4, 2, 3,
	2, 2, 4, 4, 3, 6, 3, 4, 4, 4,
	6, 5, 5, 3, 3, 5, 6, 3, 3, 3,
	5, 3, 3, 3, 3, 3, 0, 3, 0, 2,
	0, 1, 1, 1, 0, 2, 2, 4, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 1, 2, 3, 3, 3,
	2, 3, 1, 2, 1, 1, 1, 2, 3, 2,
	2, 0, 2, 3, 2, 2, 2, 1, 0, 2,
	2, 2, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0,
}
var yyChk = [...]int{

	-1000, -228, -13, -14, -18, -19, -20, -21, -22, -23,
	-24, -7, -26, -27, -30, -28, -8, -9, -10, -11,
	-12, -29, -15, -16, 6, -34, 8, 9, 40, -25,
	121, 122, 123, 144, 125, 137, 43, 60, 262, 139,
	269, 272, 273, 276, 275, 290, 36, 138, 142, 143,
	-230, 7, 246, 63, -229, 297, -93, 14, -33, 5,
	-31, -232, -31, -31, -31, -31, -198, 63, 238, -216,
	22, 27, 128, 29, -117, 132, 128, 129, 238, 128,
	128, 232, 121, 227, 264, -59, 266, 267, 234, 128,
	268, 230, 265, 229, 66, 42, 128, -131, 66, -125,
	252, 19, 199, 145, 164, 253, 295, 75, 198, 201,
	202, 140, 160, 204, 203, 196, 154, 38, 194, 178,
	270, 257, 236, 193, 155, 22, 179, 183, 277, 206,
	177, 24, 254, 45, 181, 207, 49, 197, 208, 185,
	184, 186, 167, 17, 209, 210, 180, 182, 256, 142,
	211, 48, 190, 271, 273, 234, 195, 169, 158, 159,
	144, 258, 130, 161, 290, 291, 293, 292, 294, 296,
	-136, -136, 69, 256, -136, 274, -136, -136, 291, 293,
	292, 294, 295, 262, -136, -136, -136, -136, -14, -97,
	16, 15, -17, -15, -230, 6, 31, 32, -39, 50,
	51, -32, -117, -56, -131, 10, -103, -104, -106, 274,
	-138, -105, 278, 279, 277, -127, -114, 280, -126, -124,
	168, 165, 66, -125, 81, 33, 35, 188, 84, 151,
	116, 173, 15, 85, 162, 115, 235, 200, 247, 121,
	58, 239, 240, 237, 238, 227, 156, 39, 9, 36,
	138, 32, 109, 123, 88, 89, 264, 141, 34, 139,
	78, 18, 61, 10, 42, 12, 13, 133, 132, 100,
	129, 56, 7, 149, 150, 117, 37, 97, 52, 30,
	54, 98, 16, 241, 242, 41, 176, 172, 251, 175,
	148, 171, 111, 59, 46, 82, 76, 157, 79, 62,
	143, 80, 14, 57, 267, 135, 266, 153, 99, 124,
	246, 55, 6, 250, 40, 137, 147, 53, 128, 228,
	174, 146, 170, 87, 131, 77, 268, 5, 29, 191,
	8, 60, 134, 243, 244, 245, 44, 166, 163, 265,
	255, 86, 11, 192, -227, 277, 271, 263, 259, -199,
	-194, -130, 66, -125, -120, 133, 129, 129, 129, -120,
	128, -119, 133, 66, -119, -56, -56, 231, 128, 238,
	-136, -136, 228, -60, 235, 236, -136, -136, -136, 234,
	-136, -136, -136, -136, -136, -56, -136, 69, -136, -82,
	-230, -82, -136, -56, -136, 296, 275, 276, -231, 65,
	-98, 18, 41, -47, -67, 82, -72, 39, 34, -71,
	-68, -86, -84, -85, 116, 105, 106, 113, 83, 117,
	-76, -74, -75, -77, 68, 67, 69, 70, 71, 72,
	76, 77, 78, -126, -131, -82, -230, 54, 55, 247,
	248, 251, 249, 85, 44, 237, 245, 244, 243, 241,
	242, 239, 240, 133, 238, 111, 246, 66, -125, -94,
	-95, -47, -93, -14, -31, 46, -37, 32, 74, -57,
	37, -56, 40, 118, -56, 64, -107, -110, -108, 281,
	283, -105, 274, 90, -113, -126, 68, 39, -113, 40,
	15, 15, 65, 64, -140, -143, -145, -144, -146, -141,
	-142, 162, 163, 116, 166, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 40, 140, 158, 159, 160,
	161, 179, 180, 181, 182, 183, 184, 185, 186, 145,
	164, 253, 146, 147, 148, 149, 150, 151, 153, 154,
	155, 156, 157, -131, 82, 66, 66, 66, -56, -56,
	-62, -56, 34, 62, -131, -42, 10, -56, -56, -58,
	10, 10, -58, -136, -136, -136, -80, -47, -136, -122,
	131, 33, -136, -136, -136, 8, 100, 81, 80, 97,
	64, 17, -47, -69, 100, 82, 98, 99, 84, 102,
	101, 112, 105, 106, 107, 108, 109, 110, 111, 103,
	104, 115, 90, 91, 92, 93, 94, 95, 96, -118,
	-230, -85, -230, 119, 120, -72, -72, -72, -72, -72,
	-72, -230, 118, -14, -230, -230, -230, -230, -230, -230,
	-230, -89, -47, -230, -233, -230, -233, -233, -233, -233,
	-233, -233, -233, -230, -230, -230, -230, 64, -96, 35,
	36, -97, -231, -39, -73, -126, 69, 72, -38, 53,
	-70, 40, 44, -14, -230, -56, -101, -102, -86, -126,
	-131, -132, -131, -124, 165, 168, -66, 11, -106, -138,
	-109, 64, -111, 64, 282, 284, 285, -107, 62, 79,
	-47, -177, 115, -230, 261, 23, -200, -201, -202, -155,
	-151, -153, -154, -156, -157, -158, -159, -160, -161, -162,
	-163, -164, -165, -166, -167, -168, -169, -170, -171, -172,
	-173, -174, -175, 75, 270, -183, 188, 199, 43, 200,
	201, 202, 129, 204, 205, 206, 24, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 39, -194, -195, -196,
	-5, -4, 129, 30, 27, 22, 21, -219, -220, -221,
	-189, -148, -190, -191, -192, -149, -36, -150, -178, -179,
	76, 82, 39, 188, 135, 30, 29, 75, 62, 115,
	198, 195, -185, 191, -147, 63, -147, -147, -147, -147,
	-176, 165, -176, -176, -176, 63, 63, -147, -147, -147,
	-187, 63, -187, -187, -188, 63, -188, -222, -223, -224,
	-183, 34, 62, 62, 62, -121, 124, 270, 247, 126,
	123, 127, 122, 188, 165, 75, 39, 14, 258, 66,
	64, -56, -97, 233, -136, -136, -61, 98, 11, -56,
	-56, -136, 64, -231, -56, 48, -47, -47, -78, 76,
	82, 77, 78, -47, -47, -72, -79, -82, -85, 73,
	100, 98, 99, 84, -72, -72, -72, -72, -72, -72,
	-72, -72, -72, -72, -72, -72, -72, -72, -72, -137,
	66, 68, 66, -71, -71, -126, -45, 32, -44, -46,
	107, -47, -131, -127, -132, -124, -231, -14, -44, -44,
	-47, -47, -44, -37, -87, -88, 86, -126, -231, -44,
	-45, -44, -44, -95, -98, -116, 18, 10, 44, 44,
	-44, -100, 62, -101, -81, -83, -82, -230, -14, -99,
	-126, -66, 64, 90, 118, -93, -47, -108, -110, -112,
	286, 283, 289, 66, -130, -230, -230, -202, -182, 90,
	-182, 115, -181, 168, 165, -182, -182, -182, -182, -182,
	203, 203, -182, -182, -182, -182, -182, -182, -182, -182,
	-182, -182, -182, -182, -182, -6, 66, -197, -196, 135,
	29, 28, -221, 76, 68, 69, 70, 76, 237, -68,
	30, 30, 68, 8, -180, 66, 68, 193, 194, 39,
	39, 196, 197, -186, 192, 69, -176, -176, 40, -193,
	68, -193, 69, 69, -224, 115, -181, -56, -56, -56,
	-136, -122, -123, 129, 30, 90, 131, 136, 136, 136,
	-56, -136, 68, 68, -47, -61, -47, -136, 49, 76,
	77, 78, -79, -72, -72, -72, -43, 141, 81, -231,
	-231, -44, 64, -129, -128, 33, -126, 68, 118, -230,
	118, -231, -231, -231, 64, 134, 33, -231, -44, -90,
	-88, 88, -47, -231, -231, -231, -231, -231, -56, -48,
	10, 38, -100, 64, -231, -231, -231, 64, 118, -93,
	-102, -47, -127, -97, 283, 287, 288, -231, -130, -130,
	68, -180, -182, -182, 40, 69, 69, 69, 68, 68,
	-182, -182, 69, 68, 66, 69, 69, 69, 69, 39,
	68, 39, 194, 193, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 69, 39, 69, 39, 69,
	39, 66, -125, -2, -1, 134, -6, 30, -197, -35,
	-115, 237, 241, 242, 65, 66, 116, 65, 64, 65,
	64, 65, 64, -182, -182, -230, -230, -230, -56, -136,
	66, 165, -198, 66, -194, -43, 81, -72, -72, -231,
	-46, -128, 107, -132, -45, -127, -139, 116, 162, 140,
	160, 156, 177, 167, 190, 158, 191, -137, -139, 252,
	-93, 89, -47, 87, -66, -49, -50, -51, -52, -63,
	-85, -230, -56, 30, -83, 44, -14, -230, -126, -126,
	-97, -231, -231, -180, -180, 68, 68, 63, -3, 23,
	20, 26, 63, -2, -6, 63, 68, 69, 69, -218,
	66, 39, -184, 66, 116, 39, -204, -203, -126, -204,
	-204, 40, -72, 118, -231, -231, -147, -147, -147, -188,
	-147, 150, -147, 150, -231, -231, -230, -41, 250, -47,
	-91, 12, 64, -53, -54, -55, 52, 56, 58, 53,
	54, 55, 59, -135, 33, -49, -230, -134, -133, 33,
	-131, 68, 8, -81, -14, 118, -230, -152, 260, -204,
	-204, 63, -2, 65, 69, 65, 65, -231, 64, -147,
	-231, -231, 66, 107, -176, 66, -72, -231, 68, -92,
	13, 15, -50, -51, -50, -51, 52, 52, 52, 57,
	52, 57, 52, -54, -131, -231, -64, 60, 132, 61,
	-133, -101, -231, -126, -226, -225, 259, 69, 65, 65,
	-204, 63, 65, -207, -203, -205, -208, -40, 100, 255,
	-47, -80, 62, 62, 52, 52, 129, 129, 129, 64,
	-231, 66, -209, -209, 65, -204, -206, -214, -210, -212,
	24, 75, 134, -206, -211, -210, 255, -206, -210, -231,
	253, 59, 256, -47, -47, -230, -230, -230, -225, 44,
	-215, 24, -1, 75, 255, -209, 65, -213, 41, 19,
	-182, 68, -217, 23, 20, 25, 49, 254, 257, -65,
	-126, -65, -65, 100, -182, 68, 25, -209, -182, -182,
	69, 66, 49, -231, 64, -231, -231, -82, 69, 66,
	-218, -218, 255, -126, 256, 257,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 587, 0, 373, 373, 373, 373, 373, 0,
	678, 661, 0, 0, 0, 360, 0, 0, 882, 882,
	0, 882, 0, 882, 882, 0, 882, 882, 882, 882,
	0, 33, 34, 880, 1, 3, 595, 0, 0, 377,
	380, 375, 661, 0, 0, 0, 49, 0, 659, 0,
	0, 0, 659, 679, 0, 662, 657, 0, 657, 0,
	0, 0, 0, 882, 882, 0, 882, 882, 882, 0,
	882, 882, 882, 882, 882, 361, 0, 368, 684, 685,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	324, 325, 882, 0, 328, 882, 330, 331, 0, 0,
	882, 0, 882, 0, 369, 370, 371, 372, 27, 599,
	0, 0, 587, 29, 0, 373, 378, 379, 383, 381,
	382, 374, 0, 0, 433, 0, 37, 38, 623, 0,
	0, 625, 652, 653, -2, 0, 0, 0, 682, 683,
	-2, 699, 680, 681, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 44, 50, 51, 0, 0, 0,
	165, 0, 169, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 323, 356, 0, 0,
	343, 344, 358, 0, 362, 363, 347, 348, 349, 358,
	351, 352, 353, 354, 355, 882, 326, 882, 329, 882,
	0, 882, 334, 673, 336, 882, 882, 882, 28, 881,
	23, 0, 0, 596, 443, 0, 448, 450, 0, 485,
	486, 487, 488, 489, 0, 0, 0, 0, 0, 0,
	511, 512, 513, 514, 573, 574, 575, 576, 577, 578,
	579, 452, 453, 570, 0, 619, 0, 0, 0, 0,
	0, 0, 0, 561, 0, 535, 535, 535, 535, 535,
	535, 535, 535, 0, 0, 0, 0, -2, -2, 588,
	589, 592, 595, 27, 380, 0, 385, 384, 376, 0,
	0, 432, 0, 0, 441, 0, 637, 648, 641, 0,
	0, 626, 0, 0, 630, 634, 635, 636, 266, 633,
	0, 0, -2, 291, 175, 242, 172, 173, 174, 235,
	190, 235, 235, 235, 235, 262, 262, 262, 262, 218,
	219, 220, 221, 222, 0, 0, 205, 235, 235, 235,
	209, 225, 226, 227, 228, 229, 230, 231, 232, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 237, 237,
	237, 239, 239, -2, 0, 0, 0, 0, 91, 0,
	317, 320, 658, 0, 319, 595, 0, 882, 882, 364,
	0, 0, 882, 367, 327, 332, 0, 483, 333, 0,
	674, 675, 337, 338, 339, 600, 0, 0, 0, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 470, 471, 472, 473, 474, 475, 476, 449,
	0, 463, 0, 0, 0, 505, 506, 507, 508, 509,
	0, 387, 0, 27, 0, 0, 0, 0, 0, 0,
	383, 0, 562, 0, 527, 0, 528, 529, 530, 531,
	532, 533, 534, 0, 387, 0, 0, 0, 591, 593,
	594, 599, 30, 383, 0, 580, 0, 0, 0, 386,
	612, 0, 0, -2, 0, 431, 441, 620, 0, 570,
	0, 434, 686, 687, 699, 700, 587, 0, 624, 0,
	639, 0, 640, 0, 0, 650, 651, 638, 627, 628,
	629, 631, 0, 0, 0, 0, 92, -2, 95, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 84, 84, 0, 84, 84, 84, 84,
	84, 0, 0, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 83, 166, 167, 283,
	302, 0, 304, 305, 300, -2, 292, 168, 176, 177,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	246, 0, 0, 261, 0, 275, 277, 0, 0, 0,
	0, 0, 244, 243, 189, 0, 262, 262, 212, 213,
	214, 0, 215, 216, 217, 0, 0, 206, 207, 208,
	200, 0, 201, 202, 203, 0, 204, 45, -2, 78,
	0, 660, 0, 0, 0, 882, 673, 0, 670, 0,
	668, 0, 663, 664, 665, 666, 667, 669, 671, 672,
	0, 318, 882, 0, 341, 342, 345, 0, 0, 359,
	364, 350, 0, 618, 882, 0, 444, 445, 447, 464,
	0, 466, 468, 597, 598, 454, 455, 479, 480, 481,
	0, 0, 0, 0, 477, 459, 0, 490, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 504,
	546, 547, 0, 502, 503, 510, 0, 0, 388, 389,
	391, 395, 0, 571, 0, -2, 482, 27, 0, 0,
	0, 0, 0, 0, 568, 565, 0, 0, 536, 0,
	0, 0, 0, 590, 24, 0, 655, 656, 581, 582,
	400, 31, 0, 612, 602, 614, 616, 0, 27, 0,
	608, 587, 0, 0, 0, 595, 442, 649, 642, 643,
	0, 0, 647, 267, 0, 0, 0, 96, 0, 85,
	0, 84, 84, 86, 0, 0, 0, 0, 0, 0,
	84, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 284, 283, 303, 0,
	302, 293, 178, 247, 248, 249, 250, 251, 252, 253,
	274, 276, 278, 0, 265, 160, 161, 268, 269, 270,
	271, 272, 273, 171, 245, 0, 210, 211, 0, 0,
	233, 0, 0, 0, 79, 84, 84, 0, 0, 0,
	309, 0, 882, 676, 677, 0, 0, 0, 0, 0,
	321, 340, 357, 365, 366, 346, 484, 335, 601, 465,
	467, 469, 456, 477, 460, 0, 457, 0, 0, 451,
	515, 0, 0, 392, 396, 0, 398, 399, 0, 387,
	0, -2, 518, 519, 0, 0, 0, 0, 587, 0,
	566, 0, 0, 526, 537, 538, 539, 540, 25, 441,
	0, 0, 32, 0, 617, -2, 0, 0, 0, 595,
	621, 622, 571, 36, 644, 645, 646, 52, 0, 0,
	162, 163, 0, 0, 87, 121, 122, 159, 124, 125,
	0, 0, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
	146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 0, 296, 0, 0, 295, 283, 254,
	255, 258, 259, 260, 236, 263, 264, 223, 0, 224,
	0, 240, 0, 0, 0, 0, 0, 0, 310, 311,
	312, 0, 314, 315, 316, 458, 0, 478, 461, 516,
	390, 397, 393, 0, 0, 572, 0, 235, 235, 551,
	235, 239, 554, 235, 556, 235, 559, 0, 0, 0,
	563, 525, 569, 0, 583, 401, 402, 404, 405, 406,
	414, 0, 416, 0, 615, 0, -2, 0, 610, 609,
	35, 0, 42, 123, 164, 126, 127, 0, 294, 297,
	298, 299, 0, 0, 295, 0, 234, 0, 0, 80,
	57, 58, 81, 88, 89, 90, 0, 306, 235, 0,
	0, 0, 462, 0, 517, 520, 548, 262, 552, 553,
	555, 557, 558, 560, 522, 521, 0, 0, 0, 567,
	585, 0, 0, 0, 0, 0, 421, 0, 0, 424,
	0, 0, 0, 0, 415, 0, 0, 435, 417, 0,
	419, 420, 0, 605, 27, 0, 0, 54, 0, 0,
	0, 0, 0, 256, 0, 238, 241, 62, 0, 308,
	66, 70, 313, 394, 549, 550, 541, 524, 564, 26,
	0, 0, 403, 410, 0, 413, 422, 423, 425, 0,
	427, 0, 429, 430, 407, 408, 409, 0, 0, 0,
	418, 613, -2, 611, 0, 39, 0, 43, 289, 289,
	0, 0, 257, 72, 307, 72, 72, 0, 0, 0,
	586, 584, 0, 0, 426, 428, 0, 0, 0, 0,
	53, 0, 279, 280, 289, 0, 46, 63, 64, 65,
	84, 0, 0, 47, 67, 68, 0, 48, 71, 523,
	0, 0, 0, 411, 412, 0, 0, 0, 40, 0,
	290, 84, 286, 0, 0, 281, 289, 73, 84, 84,
	0, 61, 59, 55, 56, 0, 542, 0, 545, 0,
	439, 0, 0, 0, 0, 287, 0, 282, 0, 0,
	60, 69, 543, 436, 0, 437, 438, 41, 285, 288,
	74, 75, 0, 440, 0, 544,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 83, 3, 3, 3, 110, 102, 3,
	63, 65, 107, 105, 64, 106, 118, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 297,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1009
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1015
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1017
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1021
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1045
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1053
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1057
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1064
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1070
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1074
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1080
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1084
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1090
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1101
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1113
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1117
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1123
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1129
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1135
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1139
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1149
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1155
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1161
		{
			yyVAL.optVal = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1165
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1182
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 46:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1190
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 47:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1194
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1198
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1204
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1208
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1216
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 53:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1222
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1229
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1238
		{
			yyVAL.str = "hash"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1242
		{
			yyVAL.str = "btree"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.str = "default"
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1259
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1268
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1275
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1283
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1287
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1293
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1297
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1302
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1306
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1312
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1316
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1324
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1328
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1333
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1337
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1343
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1354
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1366
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1370
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1376
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1380
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1386
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1393
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1401
		{
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1403
		{
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1406
		{
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1412
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1416
		{
			yyVAL.str = "character set"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1422
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1426
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1430
		{
			yyVAL.str = "default"
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1436
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1447
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1528
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1532
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1538
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1542
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1548
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1555
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1562
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1569
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1576
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1583
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1590
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1597
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1604
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1611
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1618
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1625
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1639
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1646
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1653
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1660
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1667
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1674
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1681
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1688
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1695
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1718
		{
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1722
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1728
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1734
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1747
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1753
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1759
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1765
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1771
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1787
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1800
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1806
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1812
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1818
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1822
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1828
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1836
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1840
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1844
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1848
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1852
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1856
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1860
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1864
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1868
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1876
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1884
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1888
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1894
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1898
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1904
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1908
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1919
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1925
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1929
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1953
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1965
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1971
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1976
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1980
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1986
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2002
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2006
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2012
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2022
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2026
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2032
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2036
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2049
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2063
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2105
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2114
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2137
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2141
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2149
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2153
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2157
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2163
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2169
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2175
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2181
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2187
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2195
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2199
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2203
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2207
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2211
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2217
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2221
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2229
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2233
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2237
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2241
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2245
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2249
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2253
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2257
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2265
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2269
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2273
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2318
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2323
		{
			yyVAL.optVal = nil
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2327
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2332
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2336
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2344
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2354
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2362
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2366
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2371
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2375
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2382
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2386
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2392
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2396
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2400
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2404
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2408
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2412
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2422
		{
			yyVAL.str = yyDollar[3].str
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2428
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2432
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2436
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2444
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2448
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2452
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2459
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2464
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2468
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2472
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2479
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2484
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2488
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2494
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2498
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2502
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2508
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2518
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2528
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2537
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2541
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2547
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2553
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2565
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2579
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2590
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2606
		{
			yyVAL.str = ""
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2610
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2616
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2630
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2637
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2645
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2649
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2655
		{
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2658
		{
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2661
		{
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2672
		{
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2675
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2681
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2685
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2689
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2695
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2699
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2704
		{
			// set empty
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2709
		{
			yyVAL.str = yyDollar[1].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2716
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2720
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2730
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2736
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2742
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2746
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2751
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2756
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2760
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2764
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2768
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2772
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2778
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2786
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2791
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2805
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2811
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2817
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2823
		{
			yyVAL.statement = &Xa{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			yyVAL.statement = &Explain{}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2835
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2839
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2845
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2849
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2853
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2857
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2863
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2867
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2871
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2875
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2879
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2883
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2887
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2891
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 340:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2897
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2901
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2905
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2909
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2913
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2917
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 346:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2921
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2925
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2929
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2933
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 350:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2937
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2941
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2945
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2949
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2953
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2957
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2962
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2966
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2971
		{
			yyVAL.tableName = TableName{}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2981
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2985
		{
			yyVAL.str = "full "
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2991
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3001
		{
			yyVAL.showFilter = nil
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3005
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3009
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3015
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3021
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3027
		{
			yyVAL.statement = &OtherRead{}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3031
		{
			yyVAL.statement = &OtherRead{}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3035
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3039
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3044
		{
			setAllowComments(yylex, true)
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3047
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3053
		{
			yyVAL.bytes2 = nil
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3057
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3063
		{
			yyVAL.str = UnionStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3067
		{
			yyVAL.str = UnionAllStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3071
		{
			yyVAL.str = UnionDistinctStr
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3076
		{
			yyVAL.str = ""
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3080
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3084
		{
			yyVAL.str = SQLCacheStr
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3089
		{
			yyVAL.str = ""
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3093
		{
			yyVAL.str = DistinctStr
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3098
		{
			yyVAL.str = ""
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			yyVAL.str = StraightJoinHint
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3107
		{
			yyVAL.selectExprs = nil
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3117
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3121
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3131
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3135
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3139
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3144
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3152
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3159
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3164
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3168
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3178
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3188
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3192
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3196
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3202
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3215
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3219
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3223
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3227
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3232
		{
			yyVAL.empty = struct{}{}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3236
		{
			yyVAL.empty = struct{}{}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3241
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3245
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3249
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3256
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3262
		{
			yyVAL.str = JoinStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3266
		{
			yyVAL.str = JoinStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3270
		{
			yyVAL.str = JoinStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3274
		{
			yyVAL.str = StraightJoinStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3280
		{
			yyVAL.str = LeftJoinStr
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3284
		{
			yyVAL.str = LeftJoinStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3288
		{
			yyVAL.str = RightJoinStr
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3292
		{
			yyVAL.str = RightJoinStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3298
		{
			yyVAL.str = NaturalJoinStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3302
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3312
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3316
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3322
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3326
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3331
		{
			yyVAL.indexHints = nil
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3335
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3339
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3343
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3349
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3353
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3358
		{
			yyVAL.expr = nil
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3362
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3368
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3372
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3376
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3380
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3384
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3388
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3392
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3398
		{
			yyVAL.str = ""
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3402
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3408
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3412
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3418
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3422
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3426
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3430
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3434
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3438
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3442
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3446
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 462:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3450
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3454
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3460
		{
			yyVAL.str = IsNullStr
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3464
		{
			yyVAL.str = IsNotNullStr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3468
		{
			yyVAL.str = IsTrueStr
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3472
		{
			yyVAL.str = IsNotTrueStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3476
		{
			yyVAL.str = IsFalseStr
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3480
		{
			yyVAL.str = IsNotFalseStr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3486
		{
			yyVAL.str = EqualStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3490
		{
			yyVAL.str = LessThanStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3494
		{
			yyVAL.str = GreaterThanStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3498
		{
			yyVAL.str = LessEqualStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3502
		{
			yyVAL.str = GreaterEqualStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3506
		{
			yyVAL.str = NotEqualStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3510
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3515
		{
			yyVAL.expr = nil
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3519
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3525
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3529
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3533
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3539
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3545
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3549
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3555
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3559
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3563
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3571
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3575
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3579
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3583
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3587
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3591
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3595
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3599
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3603
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3607
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3611
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3615
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3619
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3623
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3627
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3631
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3635
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3639
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3647
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3661
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3665
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3669
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3687
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3691
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3695
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3705
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3709
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3713
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 521:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3717
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 522:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3721
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 523:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3725
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3729
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 525:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3733
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3737
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3747
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3751
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3755
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3759
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3764
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3769
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3774
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3779
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3794
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3798
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3802
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3806
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3812
		{
			yyVAL.str = ""
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3816
		{
			yyVAL.str = BooleanModeStr
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3820
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 544:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3824
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3828
		{
			yyVAL.str = QueryExpansionStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3834
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3838
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3844
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3848
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3852
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3856
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3860
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3870
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3874
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3878
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3882
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3886
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3890
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3894
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3899
		{
			yyVAL.expr = nil
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3903
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3908
		{
			yyVAL.str = string("")
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3912
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3918
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3922
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3928
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3933
		{
			yyVAL.expr = nil
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3937
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3943
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3947
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3951
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3957
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3961
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3965
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3969
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3973
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3977
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3981
		{
			yyVAL.expr = &NullVal{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3987
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3996
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4000
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4005
		{
			yyVAL.exprs = nil
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4009
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4014
		{
			yyVAL.expr = nil
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4018
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4023
		{
			yyVAL.orderBy = nil
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4027
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4033
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4037
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4043
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4048
		{
			yyVAL.str = AscScr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4052
		{
			yyVAL.str = AscScr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4056
		{
			yyVAL.str = DescScr
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4061
		{
			yyVAL.limit = nil
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4065
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4069
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4073
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4078
		{
			yyVAL.str = ""
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4082
		{
			yyVAL.str = ForUpdateStr
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4086
		{
			yyVAL.str = ShareModeStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4099
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4103
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4107
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4112
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4116
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4120
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4127
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4131
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4135
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4139
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4144
		{
			yyVAL.updateExprs = nil
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4148
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4154
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4158
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4164
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4168
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4174
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4180
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4190
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4194
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4200
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4206
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4210
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4216
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4220
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4227
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4231
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4235
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4239
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4243
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4250
		{
			yyVAL.bytes = []byte("charset")
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4256
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4260
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4264
		{
			yyVAL.expr = &Default{}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4270
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4274
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4280
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4284
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4290
		{
			yyVAL.str = ""
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4294
		{
			yyVAL.str = yyDollar[2].str
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4300
		{
			yyVAL.str = yyDollar[3].str
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4306
		{
			yyVAL.str = RepeatableRead
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4310
		{
			yyVAL.str = ReadCommitted
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4314
		{
			yyVAL.str = ReadUncommitted
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4318
		{
			yyVAL.str = Serializable
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4324
		{
			yyVAL.str = ""
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4328
		{
			yyVAL.str = yyDollar[2].str
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4334
		{
			yyVAL.str = TxReadWrite
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4338
		{
			yyVAL.str = TxReadOnly
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4344
		{
			yyVAL.str = SessionStr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4348
		{
			yyVAL.str = SessionStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4352
		{
			yyVAL.str = GlobalStr
		}
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4361
		{
			yyVAL.byt = 0
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4365
		{
			yyVAL.byt = 1
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4370
		{
			yyVAL.byt = 0
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4374
		{
			yyVAL.byt = 1
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4379
		{
			yyVAL.str = ""
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4383
		{
			yyVAL.str = IgnoreStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4389
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4393
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4397
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4401
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4405
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4409
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4413
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4417
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4421
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4425
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4430
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4434
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4438
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4444
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4448
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4453
		{
			yyVAL.str = IndexStr
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4457
		{
			yyVAL.str = UniqueStr
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4463
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4467
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4474
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4480
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4484
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4491
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4710
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4719
		{
			decNesting(yylex)
		}
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4724
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
