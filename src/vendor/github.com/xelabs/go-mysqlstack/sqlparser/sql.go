//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CONSTRAINT = 57363
const FULLTEXT = 57364
const HASH = 57365
const KEY_BLOCK_SIZE = 57366
const PARSER = 57367
const RTREE = 57368
const SPATIAL = 57369
const SYMBOL = 57370
const UNIQUE = 57371
const KEY = 57372
const ALL = 57373
const DISTINCT = 57374
const AS = 57375
const EXISTS = 57376
const ASC = 57377
const DESC = 57378
const INTO = 57379
const DUPLICATE = 57380
const DEFAULT = 57381
const SET = 57382
const LOCK = 57383
const FULL = 57384
const CHECKSUM = 57385
const VALUES = 57386
const LAST_INSERT_ID = 57387
const NEXT = 57388
const VALUE = 57389
const SHARE = 57390
const MODE = 57391
const SQL_NO_CACHE = 57392
const SQL_CACHE = 57393
const JOIN = 57394
const STRAIGHT_JOIN = 57395
const LEFT = 57396
const RIGHT = 57397
const INNER = 57398
const OUTER = 57399
const CROSS = 57400
const NATURAL = 57401
const USE = 57402
const FORCE = 57403
const ON = 57404
const ID = 57405
const HEX = 57406
const STRING = 57407
const INTEGRAL = 57408
const FLOAT = 57409
const HEXNUM = 57410
const VALUE_ARG = 57411
const LIST_ARG = 57412
const COMMENT = 57413
const COMMENT_KEYWORD = 57414
const NULL = 57415
const TRUE = 57416
const FALSE = 57417
const OFF = 57418
const OR = 57419
const AND = 57420
const NOT = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const ELSE = 57426
const END = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const INTERVAL = 57443
const JSON_EXTRACT_OP = 57444
const JSON_UNQUOTE_EXTRACT_OP = 57445
const CREATE = 57446
const ALTER = 57447
const DROP = 57448
const RENAME = 57449
const ANALYZE = 57450
const ADD = 57451
const MODIFY = 57452
const TABLE = 57453
const INDEX = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const USING = 57459
const PRIMARY = 57460
const COLUMN = 57461
const SHOW = 57462
const DESCRIBE = 57463
const EXPLAIN = 57464
const DATE = 57465
const ESCAPE = 57466
const REPAIR = 57467
const OPTIMIZE = 57468
const TRUNCATE = 57469
const BIT = 57470
const TINYINT = 57471
const SMALLINT = 57472
const MEDIUMINT = 57473
const INT = 57474
const INTEGER = 57475
const BIGINT = 57476
const INTNUM = 57477
const REAL = 57478
const DOUBLE = 57479
const FLOAT_TYPE = 57480
const DECIMAL = 57481
const NUMERIC = 57482
const TIME = 57483
const TIMESTAMP = 57484
const DATETIME = 57485
const YEAR = 57486
const CHAR = 57487
const VARCHAR = 57488
const BOOL = 57489
const CHARACTER = 57490
const VARBINARY = 57491
const NCHAR = 57492
const CHARSET = 57493
const TEXT = 57494
const TINYTEXT = 57495
const MEDIUMTEXT = 57496
const LONGTEXT = 57497
const BLOB = 57498
const TINYBLOB = 57499
const MEDIUMBLOB = 57500
const LONGBLOB = 57501
const JSON = 57502
const ENUM = 57503
const GEOMETRY = 57504
const POINT = 57505
const LINESTRING = 57506
const POLYGON = 57507
const GEOMETRYCOLLECTION = 57508
const MULTIPOINT = 57509
const MULTILINESTRING = 57510
const MULTIPOLYGON = 57511
const NULLX = 57512
const AUTO_INCREMENT = 57513
const APPROXNUM = 57514
const SIGNED = 57515
const UNSIGNED = 57516
const ZEROFILL = 57517
const FIXED = 57518
const DYNAMIC = 57519
const STORAGE = 57520
const DISK = 57521
const MEMORY = 57522
const COLUMN_FORMAT = 57523
const AVG_ROW_LENGTH = 57524
const COMPRESSION = 57525
const CONNECTION = 57526
const DATA = 57527
const DIRECTORY = 57528
const DELAY_KEY_WRITE = 57529
const ENCRYPTION = 57530
const INSERT_METHOD = 57531
const MAX_ROWS = 57532
const MIN_ROWS = 57533
const PACK_KEYS = 57534
const PASSWORD = 57535
const ROW_FORMAT = 57536
const STATS_AUTO_RECALC = 57537
const STATS_PERSISTENT = 57538
const STATS_SAMPLE_PAGES = 57539
const TABLESPACE = 57540
const COMPRESSED = 57541
const REDUNDANT = 57542
const COMPACT = 57543
const TOKUDB_DEFAULT = 57544
const TOKUDB_FAST = 57545
const TOKUDB_SMALL = 57546
const TOKUDB_ZLIB = 57547
const TOKUDB_QUICKLZ = 57548
const TOKUDB_LZMA = 57549
const TOKUDB_SNAPPY = 57550
const TOKUDB_UNCOMPRESSED = 57551
const DATABASES = 57552
const TABLES = 57553
const WARNINGS = 57554
const VARIABLES = 57555
const EVENTS = 57556
const BINLOG = 57557
const GTID = 57558
const STATUS = 57559
const COLUMNS = 57560
const FIELDS = 57561
const CURRENT_TIMESTAMP = 57562
const DATABASE = 57563
const CURRENT_DATE = 57564
const CURRENT_TIME = 57565
const LOCALTIME = 57566
const LOCALTIMESTAMP = 57567
const UTC_DATE = 57568
const UTC_TIME = 57569
const UTC_TIMESTAMP = 57570
const REPLACE = 57571
const CONVERT = 57572
const CAST = 57573
const GROUP_CONCAT = 57574
const SEPARATOR = 57575
const MATCH = 57576
const AGAINST = 57577
const BOOLEAN = 57578
const LANGUAGE = 57579
const WITH = 57580
const QUERY = 57581
const EXPANSION = 57582
const UNUSED = 57583
const PARTITION = 57584
const PARTITIONS = 57585
const LIST = 57586
const XA = 57587
const DISTRIBUTED = 57588
const ENGINES = 57589
const VERSIONS = 57590
const PROCESSLIST = 57591
const QUERYZ = 57592
const TXNZ = 57593
const KILL = 57594
const ENGINE = 57595
const SINGLE = 57596
const BEGIN = 57597
const START = 57598
const TRANSACTION = 57599
const COMMIT = 57600
const ROLLBACK = 57601
const GLOBAL = 57602
const LOCAL = 57603
const SESSION = 57604
const NAMES = 57605
const ISOLATION = 57606
const LEVEL = 57607
const READ = 57608
const WRITE = 57609
const ONLY = 57610
const REPEATABLE = 57611
const COMMITTED = 57612
const UNCOMMITTED = 57613
const SERIALIZABLE = 57614
const RADON = 57615
const ATTACH = 57616
const ATTACHLIST = 57617
const DETACH = 57618
const RESHARD = 57619
const CLEANUP = 57620

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"KEY_BLOCK_SIZE",
	"PARSER",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4748

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 212,
	90, 835,
	-2, 651,
	-1, 218,
	90, 697,
	-2, 629,
	-1, 449,
	118, 681,
	-2, 677,
	-1, 450,
	118, 682,
	-2, 678,
	-1, 484,
	115, 79,
	165, 79,
	168, 79,
	-2, 90,
	-1, 535,
	1, 73,
	296, 73,
	-2, 79,
	-1, 652,
	5, 27,
	-2, 600,
	-1, 686,
	115, 79,
	165, 79,
	168, 79,
	-2, 91,
	-1, 747,
	30, 301,
	63, 301,
	66, 301,
	129, 301,
	-2, 832,
	-1, 800,
	1, 74,
	296, 74,
	-2, 79,
	-1, 887,
	118, 684,
	-2, 680,
	-1, 1053,
	5, 28,
	-2, 479,
	-1, 1077,
	5, 28,
	-2, 601,
	-1, 1208,
	5, 27,
	-2, 603,
	-1, 1337,
	5, 28,
	-2, 604,
}

const yyPrivate = 57344

const yyLast = 10145

var yyAct = [...]int{

	450, 1234, 1215, 1416, 213, 1368, 1342, 1374, 1241, 558,
	1242, 1372, 655, 427, 782, 1269, 1283, 1135, 1199, 916,
	1198, 1399, 796, 986, 940, 967, 917, 1280, 1178, 1046,
	871, 665, 1038, 878, 881, 403, 345, 656, 99, 886,
	56, 848, 612, 3, 66, 913, 969, 828, 187, 897,
	428, 50, 561, 390, 944, 715, 402, 801, 425, 405,
	1001, 217, 751, 469, 99, 792, 221, 470, 348, 392,
	452, 209, 458, 401, 970, 468, 208, 206, 346, 687,
	99, 99, 196, 55, 551, 177, 179, 178, 180, 181,
	1087, 1088, 933, 186, 471, 932, 472, 99, 934, 674,
	675, 50, 1086, 472, 673, 471, 174, 342, 682, 192,
	1292, 343, 1343, 1398, 1442, 1415, 1441, 1376, 1388, 1439,
	171, 1414, 1191, 1263, 216, 623, 1387, 1143, 728, 76,
	77, 1144, 1145, 24, 51, 26, 27, 363, 367, 374,
	825, 953, 362, 738, 952, 369, 370, 720, 996, 880,
	819, 70, 976, 977, 978, 476, 71, 60, 73, 775,
	979, 423, 424, 46, 1400, 992, 1258, 28, 1377, 1007,
	36, 943, 1163, 1310, 1256, 818, 783, 1021, 1020, 713,
	1019, 99, 1137, 62, 63, 64, 65, 37, 991, 1376,
	53, 384, 386, 357, 1016, 350, 972, 563, 75, 563,
	1018, 99, 821, 1364, 99, 1363, 1362, 353, 883, 221,
	352, 817, 1332, 1334, 355, 221, 221, 351, 96, 946,
	80, 946, 945, 1137, 945, 79, 1290, 1248, 385, 385,
	1080, 454, 1052, 724, 1050, 455, 602, 603, 745, 78,
	1377, 169, 926, 50, 1420, 590, 611, 364, 30, 31,
	32, 465, 34, 580, 681, 565, 590, 72, 814, 812,
	808, 1056, 811, 813, 35, 47, 39, 216, 568, 48,
	49, 33, 783, 477, 477, 941, 776, 567, 566, 830,
	473, 170, 566, 173, 1333, 175, 176, 1193, 182, 183,
	184, 185, 718, 1015, 568, 562, 1017, 562, 568, 1378,
	1240, 816, 971, 719, 721, 722, 723, 172, 725, 726,
	727, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	1386, 980, 993, 994, 815, 365, 366, 1238, 371, 372,
	373, 1057, 375, 376, 377, 378, 379, 744, 1147, 638,
	639, 925, 989, 990, 1401, 475, 683, 855, 1382, 975,
	99, 456, 898, 898, 1063, 99, 99, 99, 536, 356,
	99, 853, 854, 852, 99, 99, 829, 68, 1376, 567,
	566, 480, 53, 52, 714, 717, 1195, 1239, 567, 566,
	460, 716, 851, 810, 567, 566, 568, 1435, 1148, 38,
	570, 1031, 1032, 1033, 820, 568, 40, 395, 453, 41,
	42, 568, 44, 43, 1427, 1340, 809, 583, 584, 585,
	586, 587, 580, 381, 1058, 590, 383, 45, 1298, 1377,
	398, 387, 1299, 389, 1354, 579, 578, 588, 589, 581,
	582, 583, 584, 585, 586, 587, 580, 569, 359, 590,
	588, 589, 581, 582, 583, 584, 585, 586, 587, 580,
	599, 601, 590, 567, 566, 1233, 1232, 1109, 221, 554,
	600, 567, 566, 99, 1422, 349, 99, 987, 221, 988,
	568, 841, 843, 844, 1108, 1107, 610, 842, 568, 613,
	614, 615, 616, 617, 618, 619, 348, 622, 624, 624,
	624, 624, 624, 624, 624, 624, 632, 633, 634, 635,
	657, 1104, 1099, 640, 652, 660, 872, 1098, 873, 641,
	1132, 1130, 653, 784, 785, 786, 644, 1128, 1111, 1097,
	1005, 1004, 739, 658, 997, 382, 216, 662, 417, 416,
	418, 419, 420, 421, 684, 1408, 1113, 422, 354, 642,
	1131, 1129, 1313, 1231, 668, 667, 99, 1127, 1110, 1221,
	676, 1220, 1112, 99, 99, 1105, 1101, 798, 1100, 1092,
	741, 1025, 99, 1024, 625, 626, 627, 628, 629, 630,
	631, 581, 582, 583, 584, 585, 586, 587, 580, 1355,
	1002, 590, 984, 1436, 1428, 1179, 1236, 849, 1431, 391,
	391, 802, 1303, 1403, 559, 1367, 824, 794, 795, 1303,
	1370, 1271, 1274, 1275, 1276, 1272, 571, 1273, 1277, 1181,
	221, 1359, 835, 1235, 1365, 391, 885, 1303, 1345, 1303,
	1344, 1348, 555, 221, 556, 1183, 557, 1187, 560, 1182,
	1307, 1180, 968, 850, 1267, 391, 1185, 559, 1303, 391,
	1044, 391, 834, 1165, 621, 1162, 1184, 1154, 1153, 1150,
	1151, 1301, 50, 1106, 221, 935, 889, 1150, 1149, 1186,
	1188, 1079, 391, 915, 613, 918, 888, 902, 877, 221,
	216, 874, 539, 887, 834, 391, 875, 876, 900, 538,
	537, 899, 485, 484, 679, 348, 657, 923, 358, 1300,
	1115, 1114, 895, 1146, 924, 914, 920, 924, 57, 1075,
	1267, 1152, 919, 1044, 50, 822, 927, 905, 672, 658,
	906, 670, 922, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 666, 636, 467, 216, 53, 1072,
	1347, 777, 24, 936, 937, 1296, 930, 797, 929, 942,
	473, 193, 24, 947, 948, 949, 950, 951, 1044, 1230,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 938, 890, 891, 939, 1227, 894, 1222,
	778, 779, 780, 781, 67, 838, 839, 924, 845, 846,
	1207, 793, 901, 1044, 903, 904, 789, 790, 791, 53,
	788, 826, 827, 998, 999, 1358, 833, 912, 53, 53,
	787, 74, 914, 806, 805, 99, 99, 99, 804, 545,
	1325, 22, 24, 974, 1323, 1326, 648, 1361, 1360, 1324,
	1322, 981, 559, 99, 1321, 892, 893, 604, 605, 606,
	607, 608, 609, 579, 578, 588, 589, 581, 582, 583,
	584, 585, 586, 587, 580, 453, 650, 590, 837, 1003,
	651, 1327, 1429, 1275, 1276, 1396, 802, 1008, 1006, 197,
	198, 1013, 1413, 1030, 200, 911, 849, 459, 910, 53,
	191, 1246, 393, 1039, 1096, 928, 1168, 1000, 481, 464,
	1027, 457, 738, 1073, 221, 1271, 1274, 1275, 1276, 1272,
	803, 1273, 1277, 1040, 1034, 394, 579, 578, 588, 589,
	581, 582, 583, 584, 585, 586, 587, 580, 99, 544,
	590, 1406, 850, 579, 578, 588, 589, 581, 582, 583,
	584, 585, 586, 587, 580, 1205, 1279, 590, 1041, 194,
	195, 1084, 1042, 1405, 459, 1139, 1051, 348, 348, 983,
	982, 973, 1048, 1053, 1054, 1055, 1062, 1423, 1059, 1412,
	188, 1411, 1316, 1065, 1410, 1066, 1067, 1068, 1069, 483,
	657, 1074, 1082, 909, 1081, 482, 1093, 1134, 1094, 1095,
	189, 908, 57, 1076, 1077, 1078, 1085, 1102, 1103, 1315,
	1266, 1225, 666, 658, 1224, 216, 552, 1226, 887, 1136,
	553, 548, 1091, 847, 203, 1138, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 1287, 985, 564, 99, 1089, 1090, 59, 426, 1140,
	61, 54, 348, 1, 1341, 800, 799, 750, 749, 1043,
	1409, 69, 1155, 1156, 1397, 1373, 1404, 1375, 1380, 1026,
	1352, 1349, 1351, 1028, 686, 1060, 685, 344, 221, 1012,
	740, 756, 755, 221, 754, 885, 97, 1177, 1166, 752,
	1157, 1158, 1159, 995, 1164, 774, 1023, 1237, 1167, 761,
	760, 680, 712, 99, 711, 710, 709, 1173, 1029, 1172,
	221, 221, 202, 708, 707, 1176, 706, 1190, 1189, 918,
	1175, 705, 221, 704, 703, 702, 1217, 1171, 202, 202,
	1197, 1192, 1206, 1196, 701, 700, 1048, 1064, 699, 216,
	698, 216, 887, 697, 696, 202, 695, 694, 1218, 1219,
	693, 1208, 688, 1203, 692, 691, 919, 690, 559, 1209,
	1212, 1291, 1202, 689, 1083, 759, 757, 753, 1210, 1211,
	490, 488, 1216, 1213, 1214, 489, 487, 492, 491, 486,
	216, 1278, 1282, 1045, 1014, 807, 598, 1228, 221, 221,
	221, 1136, 574, 907, 577, 1142, 1229, 1244, 1245, 214,
	591, 592, 593, 594, 595, 596, 597, 931, 575, 576,
	573, 579, 578, 588, 589, 581, 582, 583, 584, 585,
	586, 587, 580, 671, 669, 590, 205, 204, 921, 202,
	637, 451, 1314, 1265, 99, 99, 1254, 1061, 620, 896,
	404, 840, 415, 412, 414, 413, 1243, 1243, 1243, 202,
	643, 918, 202, 221, 649, 572, 396, 1288, 221, 1331,
	1249, 1294, 1250, 1201, 542, 368, 1295, 85, 461, 1270,
	1268, 1200, 1261, 1259, 1260, 1071, 547, 1297, 1262, 221,
	1353, 1136, 1289, 1177, 1281, 647, 1161, 758, 919, 1141,
	50, 25, 58, 1202, 199, 1293, 14, 1309, 99, 99,
	99, 99, 1194, 21, 1035, 1036, 1037, 15, 13, 99,
	12, 1243, 99, 29, 10, 99, 1243, 1318, 1317, 1320,
	1319, 221, 221, 1328, 1339, 1302, 1217, 221, 1305, 1306,
	1336, 1335, 9, 8, 221, 1346, 1204, 216, 7, 6,
	5, 4, 95, 190, 1350, 23, 1312, 2, 1203, 1203,
	1203, 1203, 20, 657, 889, 19, 1357, 1202, 1202, 1202,
	1202, 18, 1281, 17, 1330, 16, 94, 11, 742, 743,
	1223, 1202, 1216, 1337, 0, 0, 658, 0, 221, 1338,
	216, 1369, 0, 0, 0, 1243, 1371, 0, 0, 1381,
	1384, 0, 1243, 1379, 1383, 0, 0, 221, 535, 1395,
	201, 1217, 1394, 202, 202, 202, 1402, 0, 546, 0,
	0, 0, 202, 202, 0, 0, 360, 361, 0, 768,
	767, 82, 221, 221, 221, 1366, 1418, 1419, 89, 764,
	0, 1407, 0, 380, 1264, 0, 1243, 1385, 0, 1424,
	0, 0, 0, 1391, 1392, 1393, 0, 1216, 0, 0,
	0, 0, 770, 1421, 0, 216, 0, 1437, 1438, 0,
	1425, 1426, 221, 0, 1434, 769, 762, 0, 0, 0,
	0, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	1417, 1417, 1417, 0, 0, 0, 1251, 1252, 0, 1253,
	1169, 1170, 1255, 0, 1257, 0, 0, 0, 0, 0,
	1430, 385, 1432, 1433, 0, 771, 0, 0, 0, 0,
	0, 202, 0, 659, 661, 0, 0, 388, 0, 0,
	1440, 0, 0, 0, 0, 766, 0, 83, 0, 93,
	91, 0, 81, 0, 88, 0, 0, 463, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 1356, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 92, 86, 87, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 765, 0,
	0, 0, 0, 0, 0, 773, 0, 0, 772, 0,
	0, 0, 0, 0, 202, 0, 0, 1389, 1390, 0,
	0, 202, 202, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 1247,
	579, 578, 588, 589, 581, 582, 583, 584, 585, 586,
	587, 580, 0, 0, 590, 0, 0, 0, 0, 0,
	143, 0, 101, 0, 0, 125, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	661, 117, 0, 884, 884, 0, 0, 884, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 884, 884, 884, 0, 0, 0, 0, 220,
	0, 540, 541, 543, 0, 0, 884, 0, 107, 659,
	549, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 579, 578, 588, 589, 581, 582,
	583, 584, 585, 586, 587, 580, 0, 0, 590, 578,
	588, 589, 581, 582, 583, 584, 585, 586, 587, 580,
	0, 0, 590, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 160, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 158, 159, 112, 163, 0, 0, 104, 0, 0,
	142, 0, 157, 0, 0, 0, 0, 0, 0, 654,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 156, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 202, 202, 0, 155, 0, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 100, 105, 132, 0, 148,
	121, 161, 823, 0, 0, 0, 0, 0, 0, 831,
	832, 0, 0, 120, 153, 0, 154, 0, 836, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 167, 166, 168, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 659, 0, 661, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 0, 101, 0, 0,
	125, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 400, 0, 0, 0, 117, 399, 0, 0,
	0, 0, 436, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 429, 430, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 449, 417, 416, 418, 419, 420,
	421, 0, 0, 107, 422, 423, 424, 0, 0, 0,
	397, 410, 0, 435, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 407, 408, 882, 0, 0, 0, 447,
	0, 409, 0, 0, 406, 411, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 0, 0, 0, 162, 661,
	884, 445, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 160, 103, 0, 0, 0, 0, 0, 0,
	0, 202, 116, 124, 0, 0, 158, 159, 112, 163,
	0, 0, 104, 0, 0, 142, 0, 157, 0, 0,
	0, 1009, 1010, 1011, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 0, 0, 152, 1022,
	0, 123, 118, 156, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 0, 122, 437, 446, 443, 444, 441,
	442, 440, 439, 438, 448, 431, 432, 434, 0, 433,
	100, 105, 132, 0, 148, 121, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 153,
	0, 154, 0, 0, 1070, 128, 0, 0, 0, 0,
	0, 0, 202, 1285, 0, 0, 0, 0, 164, 165,
	167, 166, 168, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 202, 202, 202,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	202, 0, 0, 1285, 0, 0, 659, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1160, 325, 310, 270, 328, 246, 261, 340, 263, 264,
	300, 230, 280, 143, 259, 101, 0, 0, 125, 0,
	131, 0, 0, 0, 0, 326, 277, 0, 249, 223,
	256, 224, 247, 274, 117, 245, 312, 283, 262, 0,
	334, 133, 292, 0, 151, 136, 0, 0, 276, 315,
	278, 309, 269, 301, 238, 291, 329, 260, 297, 0,
	0, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 294, 323, 258, 296, 299, 222, 293, 0,
	226, 231, 339, 321, 252, 253, 0, 0, 0, 0,
	0, 0, 0, 275, 279, 306, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 0, 290, 0, 0,
	0, 233, 228, 273, 0, 0, 0, 237, 0, 251,
	307, 0, 0, 0, 316, 268, 162, 322, 266, 265,
	330, 303, 0, 313, 248, 257, 111, 255, 149, 298,
	160, 103, 319, 314, 288, 271, 272, 227, 0, 305,
	116, 124, 244, 295, 158, 159, 112, 163, 232, 336,
	104, 219, 335, 142, 218, 157, 320, 289, 285, 229,
	318, 287, 284, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 225, 0, 152, 327, 341, 123,
	118, 156, 115, 137, 108, 102, 235, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 317, 0, 0, 0, 0, 0,
	155, 234, 122, 241, 242, 239, 240, 281, 282, 331,
	332, 333, 308, 236, 0, 0, 311, 286, 100, 105,
	132, 338, 148, 121, 161, 0, 0, 0, 0, 0,
	254, 337, 304, 302, 324, 0, 120, 153, 0, 154,
	207, 0, 0, 212, 210, 211, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 167, 166,
	168, 106, 325, 310, 270, 328, 246, 261, 340, 263,
	264, 300, 230, 280, 143, 259, 101, 0, 0, 125,
	0, 131, 0, 0, 0, 0, 326, 277, 0, 249,
	223, 256, 224, 247, 274, 117, 245, 312, 283, 262,
	0, 334, 133, 292, 0, 151, 136, 0, 0, 276,
	315, 278, 309, 269, 301, 238, 291, 329, 260, 297,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 294, 323, 258, 296, 299, 222, 293,
	0, 226, 231, 339, 321, 252, 253, 0, 0, 0,
	0, 0, 0, 0, 275, 279, 306, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 0, 290, 0,
	0, 0, 233, 228, 273, 0, 0, 0, 237, 0,
	251, 307, 0, 0, 0, 316, 268, 162, 322, 266,
	265, 330, 303, 0, 313, 248, 257, 111, 255, 149,
	298, 160, 103, 319, 314, 288, 271, 272, 227, 0,
	305, 116, 124, 244, 295, 158, 159, 112, 163, 232,
	336, 104, 219, 335, 142, 218, 157, 320, 289, 285,
	229, 318, 287, 284, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 225, 0, 152, 327, 341,
	123, 118, 156, 115, 137, 108, 102, 235, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 317, 0, 0, 0, 0,
	0, 155, 234, 122, 241, 242, 239, 240, 281, 282,
	331, 332, 333, 308, 236, 0, 0, 311, 286, 100,
	105, 132, 338, 148, 121, 161, 0, 0, 0, 0,
	0, 254, 337, 304, 302, 324, 0, 120, 153, 0,
	154, 0, 0, 0, 212, 210, 211, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 167,
	166, 168, 106, 325, 310, 270, 328, 246, 261, 340,
	263, 264, 300, 230, 280, 143, 259, 101, 0, 0,
	125, 0, 131, 0, 0, 0, 0, 326, 277, 0,
	249, 223, 256, 224, 247, 274, 117, 245, 312, 283,
	262, 0, 334, 133, 292, 0, 151, 136, 0, 0,
	276, 315, 278, 309, 269, 301, 238, 291, 329, 260,
	297, 0, 0, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 294, 323, 258, 296, 299, 222,
	293, 0, 226, 231, 339, 321, 252, 253, 0, 0,
	0, 0, 0, 0, 0, 275, 279, 306, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 290,
	0, 0, 0, 233, 228, 273, 0, 0, 0, 237,
	0, 251, 307, 0, 0, 0, 316, 268, 162, 322,
	266, 265, 330, 303, 0, 313, 248, 257, 111, 255,
	149, 298, 160, 103, 319, 314, 288, 271, 272, 227,
	0, 305, 116, 124, 244, 295, 158, 159, 112, 163,
	232, 336, 104, 219, 335, 142, 218, 157, 320, 289,
	285, 229, 318, 287, 284, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 225, 0, 152, 327,
	341, 123, 118, 156, 115, 137, 108, 102, 235, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 317, 0, 0, 0,
	0, 0, 155, 234, 122, 241, 242, 239, 240, 281,
	282, 331, 332, 333, 308, 236, 0, 0, 311, 286,
	100, 105, 132, 338, 148, 121, 161, 0, 0, 0,
	0, 0, 254, 337, 304, 302, 324, 0, 120, 153,
	0, 154, 474, 0, 0, 128, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	167, 166, 168, 106, 325, 310, 270, 328, 246, 261,
	340, 263, 264, 300, 230, 280, 143, 259, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 326, 277,
	0, 249, 223, 256, 224, 247, 274, 117, 245, 312,
	283, 262, 0, 334, 133, 292, 0, 151, 136, 0,
	0, 276, 315, 278, 309, 269, 301, 238, 291, 329,
	260, 297, 53, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 294, 323, 258, 296, 299,
	222, 293, 0, 226, 231, 339, 321, 252, 253, 0,
	0, 0, 0, 0, 0, 0, 275, 279, 306, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	290, 0, 0, 0, 233, 228, 273, 0, 0, 0,
	237, 0, 251, 307, 0, 0, 0, 316, 268, 162,
	322, 266, 265, 330, 303, 0, 313, 248, 257, 111,
	255, 149, 298, 160, 103, 319, 314, 288, 271, 272,
	227, 0, 305, 116, 124, 244, 295, 158, 159, 112,
	163, 232, 336, 104, 663, 335, 142, 664, 157, 320,
	289, 285, 229, 318, 287, 284, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 225, 0, 152,
	327, 341, 123, 118, 156, 115, 137, 108, 102, 235,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 243, 317, 0, 0,
	0, 0, 0, 155, 234, 122, 241, 242, 239, 240,
	281, 282, 331, 332, 333, 308, 236, 0, 0, 311,
	286, 100, 105, 132, 338, 148, 121, 161, 0, 0,
	0, 0, 0, 254, 337, 304, 302, 324, 0, 120,
	153, 0, 154, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 325, 310, 270, 328, 246,
	261, 340, 263, 264, 300, 230, 280, 143, 259, 101,
	0, 0, 125, 0, 131, 0, 0, 0, 0, 326,
	277, 0, 249, 223, 256, 224, 247, 274, 117, 245,
	312, 283, 262, 0, 334, 133, 292, 0, 151, 136,
	0, 0, 276, 315, 278, 309, 269, 301, 238, 291,
	329, 260, 297, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 294, 323, 258, 296,
	299, 222, 293, 0, 226, 231, 339, 321, 252, 253,
	0, 0, 0, 0, 0, 0, 0, 275, 279, 306,
	267, 0, 0, 0, 0, 0, 0, 1308, 0, 250,
	0, 290, 0, 0, 0, 233, 228, 273, 0, 0,
	0, 237, 0, 251, 307, 0, 0, 0, 316, 268,
	162, 322, 266, 265, 330, 303, 0, 313, 248, 257,
	111, 255, 149, 298, 160, 103, 319, 314, 288, 271,
	272, 227, 0, 305, 116, 124, 244, 295, 158, 159,
	112, 163, 232, 336, 104, 663, 335, 142, 664, 157,
	320, 289, 285, 229, 318, 287, 284, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 225, 0,
	152, 327, 341, 123, 118, 156, 115, 137, 108, 102,
	235, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 317, 0,
	0, 0, 0, 0, 155, 234, 122, 241, 242, 239,
	240, 281, 282, 331, 332, 333, 308, 236, 0, 0,
	311, 286, 100, 105, 132, 338, 148, 121, 161, 0,
	0, 0, 0, 0, 254, 337, 304, 302, 324, 0,
	120, 153, 0, 154, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 167, 166, 168, 106, 325, 310, 270, 328,
	246, 261, 340, 263, 264, 300, 230, 280, 143, 259,
	101, 0, 0, 125, 0, 131, 0, 0, 0, 0,
	326, 277, 0, 249, 223, 256, 224, 247, 274, 117,
	245, 312, 283, 262, 0, 334, 133, 292, 0, 151,
	136, 0, 0, 276, 315, 278, 309, 269, 301, 238,
	291, 329, 260, 297, 0, 0, 0, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 294, 323, 258,
	296, 299, 222, 293, 0, 226, 231, 339, 321, 252,
	253, 0, 0, 0, 0, 0, 0, 0, 275, 279,
	306, 267, 0, 0, 0, 0, 0, 0, 1174, 0,
	250, 0, 290, 0, 0, 0, 233, 228, 273, 0,
	0, 0, 237, 0, 251, 307, 0, 0, 0, 316,
	268, 162, 322, 266, 265, 330, 303, 0, 313, 248,
	257, 111, 255, 149, 298, 160, 103, 319, 314, 288,
	271, 272, 227, 0, 305, 116, 124, 244, 295, 158,
	159, 112, 163, 232, 336, 104, 663, 335, 142, 664,
	157, 320, 289, 285, 229, 318, 287, 284, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 225,
	0, 152, 327, 341, 123, 118, 156, 115, 137, 108,
	102, 235, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 317,
	0, 0, 0, 0, 0, 155, 234, 122, 241, 242,
	239, 240, 281, 282, 331, 332, 333, 308, 236, 0,
	0, 311, 286, 100, 105, 132, 338, 148, 121, 161,
	0, 0, 0, 0, 0, 254, 337, 304, 302, 324,
	0, 120, 153, 0, 154, 0, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 167, 166, 168, 106, 325, 310, 270,
	328, 246, 261, 340, 263, 264, 300, 230, 280, 143,
	259, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 326, 277, 0, 249, 223, 256, 224, 247, 274,
	117, 245, 312, 283, 262, 0, 334, 133, 292, 0,
	151, 136, 0, 0, 276, 315, 278, 309, 269, 301,
	238, 291, 329, 260, 297, 0, 0, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 294, 323,
	258, 296, 299, 222, 293, 0, 226, 231, 339, 321,
	252, 253, 0, 0, 0, 0, 0, 0, 0, 275,
	279, 306, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 290, 0, 0, 0, 233, 228, 273,
	0, 0, 0, 237, 0, 251, 307, 0, 0, 0,
	316, 268, 162, 322, 266, 265, 330, 303, 0, 313,
	248, 257, 111, 255, 149, 298, 160, 103, 319, 314,
	288, 271, 272, 227, 0, 305, 116, 124, 244, 295,
	158, 159, 112, 163, 232, 336, 104, 219, 335, 142,
	218, 157, 320, 289, 285, 229, 318, 287, 284, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	225, 0, 152, 327, 341, 123, 118, 156, 115, 137,
	108, 102, 235, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	317, 0, 0, 0, 0, 0, 155, 234, 122, 241,
	242, 239, 240, 281, 282, 331, 332, 333, 308, 236,
	0, 0, 311, 286, 100, 105, 132, 338, 148, 121,
	161, 0, 0, 0, 0, 0, 254, 337, 304, 302,
	324, 0, 120, 153, 0, 154, 0, 0, 0, 128,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 325, 310,
	270, 328, 246, 261, 340, 263, 264, 300, 230, 280,
	143, 259, 101, 0, 0, 125, 0, 131, 0, 0,
	0, 0, 326, 277, 0, 249, 223, 256, 224, 247,
	274, 117, 245, 312, 283, 262, 0, 334, 133, 292,
	0, 151, 136, 0, 0, 276, 315, 278, 309, 269,
	301, 238, 291, 329, 260, 297, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 294,
	323, 258, 296, 299, 222, 293, 0, 226, 231, 339,
	321, 252, 253, 0, 0, 0, 0, 0, 0, 0,
	275, 279, 306, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 0, 290, 0, 0, 0, 233, 228,
	273, 0, 0, 0, 237, 0, 251, 307, 0, 0,
	0, 316, 268, 162, 322, 266, 265, 330, 303, 0,
	313, 248, 257, 111, 255, 149, 298, 160, 103, 319,
	314, 288, 271, 272, 227, 0, 305, 116, 124, 244,
	295, 158, 159, 112, 163, 232, 336, 104, 663, 335,
	142, 664, 157, 320, 289, 285, 229, 318, 287, 284,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 225, 0, 152, 327, 341, 123, 118, 156, 115,
	137, 108, 102, 235, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 317, 0, 0, 0, 0, 0, 155, 234, 122,
	241, 242, 239, 240, 281, 282, 331, 332, 333, 308,
	236, 0, 0, 311, 286, 100, 105, 132, 338, 148,
	121, 161, 0, 0, 0, 0, 0, 254, 337, 304,
	302, 324, 0, 120, 153, 0, 154, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 167, 166, 168, 106, 325,
	310, 270, 328, 246, 261, 340, 263, 264, 300, 230,
	280, 143, 259, 101, 0, 0, 125, 0, 131, 0,
	0, 0, 0, 326, 277, 0, 249, 223, 256, 224,
	247, 274, 117, 245, 312, 283, 262, 0, 334, 133,
	292, 0, 151, 136, 0, 0, 276, 315, 278, 309,
	269, 301, 238, 291, 329, 260, 297, 0, 0, 0,
	449, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	294, 323, 258, 296, 299, 222, 293, 0, 226, 231,
	339, 321, 252, 253, 0, 0, 0, 0, 0, 0,
	0, 275, 279, 306, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 0, 290, 0, 0, 0, 233,
	228, 273, 0, 0, 0, 237, 0, 251, 307, 0,
	0, 0, 316, 268, 162, 322, 266, 265, 330, 303,
	0, 313, 248, 257, 111, 255, 149, 298, 160, 103,
	319, 314, 288, 271, 272, 227, 0, 305, 116, 124,
	244, 295, 158, 159, 112, 163, 232, 336, 104, 663,
	335, 142, 664, 157, 320, 289, 285, 229, 318, 287,
	284, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 225, 0, 152, 327, 341, 123, 118, 156,
	115, 137, 108, 102, 235, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 317, 0, 0, 0, 0, 0, 155, 234,
	122, 241, 242, 239, 240, 281, 282, 331, 332, 333,
	308, 236, 0, 0, 311, 286, 100, 105, 132, 338,
	148, 121, 161, 0, 0, 0, 0, 0, 254, 337,
	304, 302, 324, 0, 120, 153, 0, 154, 0, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 167, 166, 168, 106,
	325, 310, 270, 328, 246, 261, 340, 263, 264, 300,
	230, 280, 143, 259, 101, 0, 0, 125, 0, 131,
	0, 0, 0, 0, 326, 277, 0, 249, 223, 256,
	224, 247, 274, 117, 245, 312, 283, 262, 0, 334,
	133, 292, 0, 151, 136, 0, 0, 276, 315, 278,
	309, 269, 301, 238, 291, 329, 260, 297, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 294, 323, 258, 296, 299, 222, 293, 0, 226,
	231, 339, 321, 252, 253, 0, 0, 0, 0, 0,
	0, 0, 275, 279, 306, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 0, 290, 0, 0, 0,
	233, 228, 273, 0, 0, 0, 237, 0, 251, 307,
	0, 0, 0, 316, 268, 162, 322, 266, 265, 330,
	303, 0, 313, 248, 257, 111, 255, 149, 298, 160,
	103, 319, 314, 288, 271, 272, 227, 0, 305, 116,
	124, 244, 295, 158, 159, 112, 163, 232, 336, 104,
	663, 335, 142, 664, 157, 320, 289, 285, 229, 318,
	287, 284, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 225, 0, 152, 327, 341, 123, 118,
	156, 115, 137, 108, 102, 235, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 317, 0, 0, 0, 0, 0, 155,
	234, 122, 241, 242, 239, 240, 281, 282, 331, 332,
	333, 308, 236, 0, 0, 311, 286, 100, 105, 132,
	338, 148, 121, 161, 0, 0, 0, 0, 0, 254,
	337, 304, 302, 324, 0, 120, 153, 0, 154, 0,
	0, 0, 128, 0, 143, 0, 101, 0, 0, 125,
	0, 131, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 400, 0, 0, 0, 117, 399, 0, 0, 0,
	0, 436, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 429, 430, 0, 0, 0, 0, 0, 0, 677,
	53, 0, 0, 449, 417, 416, 418, 419, 420, 421,
	0, 0, 107, 422, 423, 424, 678, 0, 0, 397,
	410, 0, 435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 407, 408, 0, 0, 0, 0, 447, 0,
	409, 0, 0, 406, 411, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	445, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 160, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 158, 159, 112, 163, 0,
	0, 104, 0, 0, 142, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 0, 0, 152, 0, 0,
	123, 118, 156, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 122, 437, 446, 443, 444, 441, 442,
	440, 439, 438, 448, 431, 432, 434, 0, 433, 100,
	105, 132, 0, 148, 121, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 153, 0,
	154, 0, 0, 0, 128, 0, 143, 0, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 164, 165, 167,
	166, 168, 106, 400, 0, 0, 0, 117, 399, 0,
	0, 0, 0, 436, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 449, 417, 416, 418, 419,
	420, 421, 0, 0, 107, 422, 423, 424, 0, 0,
	0, 397, 410, 0, 435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 407, 408, 882, 0, 0, 0,
	447, 0, 409, 0, 0, 406, 411, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 445, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 122, 437, 446, 443, 444,
	441, 442, 440, 439, 438, 448, 431, 432, 434, 0,
	433, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	153, 0, 154, 0, 0, 0, 128, 0, 143, 0,
	101, 0, 0, 125, 0, 131, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 400, 0, 0, 0, 117,
	399, 0, 0, 0, 0, 436, 133, 0, 0, 151,
	136, 0, 0, 0, 0, 429, 430, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 391, 449, 417, 416,
	418, 419, 420, 421, 0, 0, 107, 422, 423, 424,
	0, 0, 0, 397, 410, 0, 435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 407, 408, 0, 0,
	0, 0, 447, 0, 409, 0, 0, 406, 411, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 445, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 160, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 158,
	159, 112, 163, 0, 0, 104, 0, 0, 142, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 0,
	0, 152, 0, 0, 123, 118, 156, 115, 137, 108,
	102, 0, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 122, 437, 446,
	443, 444, 441, 442, 440, 439, 438, 448, 431, 432,
	434, 0, 433, 100, 105, 132, 0, 148, 121, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 24,
	0, 120, 153, 0, 154, 0, 0, 0, 128, 0,
	143, 0, 101, 0, 0, 125, 0, 131, 0, 0,
	0, 164, 165, 167, 166, 168, 106, 400, 0, 0,
	0, 117, 399, 0, 0, 0, 0, 436, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 429, 430, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 449,
	417, 416, 418, 419, 420, 421, 0, 0, 107, 422,
	423, 424, 0, 0, 0, 397, 410, 0, 435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 407, 408,
	0, 0, 0, 0, 447, 0, 409, 0, 0, 406,
	411, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 445, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 160, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 158, 159, 112, 163, 0, 0, 104, 0, 0,
	142, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 156, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 122,
	437, 446, 443, 444, 441, 442, 440, 439, 438, 448,
	431, 432, 434, 0, 433, 100, 105, 132, 0, 148,
	121, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 153, 0, 154, 0, 0, 0,
	128, 0, 143, 0, 101, 0, 0, 125, 0, 131,
	0, 0, 0, 164, 165, 167, 166, 168, 106, 400,
	0, 0, 0, 117, 399, 0, 0, 0, 0, 436,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 449, 417, 416, 418, 419, 420, 421, 0, 0,
	107, 422, 423, 424, 0, 0, 0, 397, 410, 0,
	435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	407, 408, 0, 0, 0, 0, 447, 0, 409, 0,
	0, 406, 411, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 445, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 160,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 158, 159, 112, 163, 0, 0, 104,
	0, 0, 142, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	156, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 122, 437, 446, 443, 444, 441, 442, 440, 439,
	438, 448, 431, 432, 434, 0, 433, 100, 105, 132,
	0, 148, 121, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 153, 0, 154, 0,
	0, 143, 128, 101, 0, 0, 125, 0, 131, 0,
	0, 0, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 0, 117, 0, 0, 0, 0, 0, 436, 133,
	0, 0, 151, 136, 0, 0, 0, 0, 429, 430,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	449, 417, 416, 418, 419, 420, 421, 0, 0, 107,
	422, 423, 424, 0, 0, 0, 0, 410, 0, 435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 407,
	408, 0, 0, 0, 0, 447, 0, 409, 0, 0,
	406, 411, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 445, 0, 0,
	0, 0, 0, 0, 111, 0, 149, 0, 160, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 124,
	0, 0, 158, 159, 112, 163, 0, 0, 104, 0,
	0, 142, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 0, 0, 152, 0, 0, 123, 118, 156,
	115, 137, 108, 102, 0, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	122, 437, 446, 443, 444, 441, 442, 440, 439, 438,
	448, 431, 432, 434, 0, 433, 100, 105, 132, 0,
	148, 121, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 153, 0, 154, 0, 0,
	0, 128, 0, 0, 143, 0, 101, 0, 0, 125,
	0, 131, 0, 0, 164, 165, 167, 166, 168, 106,
	1047, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 1049, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 567, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 160, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 158, 159, 112, 163, 0,
	0, 104, 0, 0, 142, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 0, 0, 152, 0, 0,
	123, 118, 156, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 143, 0, 101, 0, 748, 747, 0, 131, 0,
	0, 746, 0, 0, 745, 0, 0, 0, 0, 0,
	0, 155, 117, 122, 0, 0, 0, 0, 0, 133,
	0, 0, 151, 136, 0, 0, 0, 0, 0, 100,
	105, 132, 0, 148, 121, 161, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 0, 0, 120, 153, 107,
	154, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 167,
	166, 168, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 744, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 149, 0, 160, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 124,
	0, 0, 158, 159, 112, 163, 0, 0, 104, 0,
	0, 142, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 0, 0, 152, 0, 0, 123, 118, 156,
	115, 137, 108, 102, 0, 109, 110, 114, 113, 24,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	143, 0, 101, 0, 0, 125, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	122, 117, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 151, 136, 0, 0, 0, 100, 105, 132, 0,
	148, 121, 161, 0, 0, 0, 53, 0, 0, 98,
	0, 0, 0, 0, 120, 153, 0, 154, 107, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 167, 166, 168, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 160, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 158, 159, 112, 163, 0, 0, 104, 0, 0,
	142, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 156, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 143, 0, 101,
	0, 0, 125, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 1284, 0, 0, 0, 155, 117, 122,
	0, 0, 0, 0, 0, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 0, 100, 105, 132, 0, 148,
	121, 161, 0, 0, 0, 0, 98, 0, 1286, 0,
	0, 0, 0, 120, 153, 107, 154, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 167, 166, 168, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 160, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 158, 159,
	112, 163, 0, 0, 104, 0, 0, 142, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 0, 0,
	152, 0, 0, 123, 118, 156, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 24, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 143, 0, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 122, 117, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 151, 136, 0,
	0, 0, 100, 105, 132, 0, 148, 121, 161, 0,
	0, 0, 53, 0, 0, 220, 0, 0, 0, 0,
	120, 153, 0, 154, 107, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 167, 166, 168, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 143, 0, 101, 0, 0, 125, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 117, 122, 0, 0, 0, 0,
	0, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 0, 220, 0, 0, 645, 0, 0, 646, 120,
	153, 107, 154, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	160, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 158, 159, 112, 163, 0, 0,
	104, 0, 0, 142, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 0, 0, 152, 0, 0, 123,
	118, 156, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 143, 0, 101, 0, 0, 125, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 122, 117, 479, 0, 0, 0, 0, 0,
	133, 0, 0, 151, 136, 0, 0, 0, 100, 105,
	132, 0, 148, 121, 161, 0, 0, 0, 0, 0,
	0, 220, 0, 478, 0, 0, 120, 153, 0, 154,
	107, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 167, 166,
	168, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 160,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 158, 159, 112, 163, 0, 0, 104,
	0, 0, 142, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	156, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 143,
	0, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	117, 122, 0, 0, 0, 0, 0, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 161, 0, 0, 0, 0, 98, 0,
	1286, 0, 0, 0, 0, 120, 153, 107, 154, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 160, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	158, 159, 112, 163, 0, 0, 104, 0, 0, 142,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 156, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 143, 0, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 117, 122, 0,
	0, 0, 0, 0, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	161, 0, 53, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 120, 153, 107, 154, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 143, 0, 101, 0, 0, 125, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 117, 122, 0, 0, 0, 0,
	0, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 0, 220, 0, 1049, 0, 0, 0, 0, 120,
	153, 107, 154, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	160, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 158, 159, 112, 163, 0, 0,
	104, 0, 0, 142, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 0, 0, 152, 0, 0, 123,
	118, 156, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 0, 143, 0, 101, 0, 0, 125, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 122, 462, 117, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 151, 136, 0, 0, 100, 105,
	132, 0, 148, 121, 161, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 120, 153, 0, 154,
	0, 107, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 167, 166,
	168, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	160, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 158, 159, 112, 163, 0, 0,
	104, 0, 0, 142, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 0, 0, 152, 0, 0, 123,
	118, 156, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	143, 0, 101, 0, 0, 125, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 117, 122, 0, 0, 0, 0, 0, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 0, 100, 105,
	132, 0, 148, 121, 161, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 120, 153, 107, 154,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 167, 166,
	168, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 160, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 158, 159, 112, 163, 0, 0, 104, 0, 0,
	142, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 156, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 143, 0, 101,
	0, 0, 125, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 117, 122,
	0, 0, 0, 0, 0, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 0, 100, 105, 132, 0, 148,
	121, 161, 0, 0, 0, 0, 449, 0, 0, 0,
	0, 0, 0, 120, 153, 107, 154, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 167, 166, 168, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 160, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 158, 159,
	112, 163, 0, 0, 104, 0, 0, 142, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 0, 0,
	152, 0, 0, 123, 118, 156, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 143, 0, 101, 0, 0, 125,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 117, 122, 0, 0, 0,
	0, 0, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 0, 100, 105, 132, 0, 148, 121, 161, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	120, 153, 107, 154, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 167, 166, 168, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 160, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 158, 159, 112, 163, 0,
	0, 104, 0, 0, 142, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 0, 0, 152, 0, 0,
	123, 118, 156, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 143, 0, 101, 0, 0, 125, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 117, 122, 0, 0, 0, 0, 0, 133,
	0, 0, 151, 136, 0, 0, 0, 0, 0, 100,
	105, 132, 0, 148, 121, 161, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 0, 0, 120, 153, 107,
	154, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 167,
	166, 168, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 149, 0, 160, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 124,
	0, 0, 158, 159, 112, 163, 0, 0, 104, 0,
	0, 142, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 0, 0, 152, 0, 0, 123, 118, 156,
	115, 137, 108, 102, 0, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 143, 0,
	101, 0, 0, 125, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 117,
	122, 0, 0, 0, 0, 0, 133, 0, 0, 151,
	136, 0, 0, 0, 0, 0, 100, 105, 132, 0,
	148, 121, 161, 0, 0, 0, 0, 1133, 0, 0,
	0, 0, 0, 0, 120, 153, 107, 154, 0, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 167, 166, 168, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 160, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 158,
	159, 112, 163, 0, 0, 104, 0, 0, 142, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 0,
	0, 152, 0, 0, 123, 118, 156, 115, 137, 108,
	102, 507, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 105, 132, 0, 148, 121, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 153, 0, 154, 0, 0, 495, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 167, 166, 168, 106, 0, 0, 0,
	0, 508, 0, 0, 0, 0, 521, 524, 525, 526,
	527, 528, 529, 0, 530, 531, 532, 533, 534, 509,
	510, 511, 512, 493, 494, 522, 0, 496, 0, 0,
	497, 498, 499, 500, 501, 502, 503, 504, 505, 506,
	513, 514, 515, 516, 517, 518, 519, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 523,
}
var yyPact = [...]int{

	127, -1000, -213, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 958, 1012, -1000, -1000, -1000, -1000, -1000, 711,
	129, 66, 1, 97, 92, 1270, 90, 9337, -1000, -1000,
	51, -1000, -168, -1000, -1000, -206, -1000, -1000, -1000, -1000,
	726, -1000, -1000, -1000, -1000, -1000, 934, 955, 735, 898,
	809, -1000, 66, 9337, 984, 2316, -152, 9534, 62, 88,
	81, 78, 62, -1000, 86, -1000, 60, 622, 60, 9337,
	9337, -89, 9, -1000, -1000, -90, -1000, -1000, -1000, -95,
	-1000, -1000, -1000, -1000, -1000, -1000, 9337, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 456, -1000, -1000, -1000, -1000, 665, 665, -1000,
	9337, -1000, -1000, -1000, -1000, -1000, 525, 854, 6245, 6245,
	958, -1000, 726, -1000, -1000, -1000, 835, -1000, -1000, 306,
	8746, 839, 133, 9337, 662, -1000, -1000, -187, 2898, -1000,
	-1000, -1000, -1000, 255, 7955, 7955, -1000, -1000, -1000, 838,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 950, 944, 618, -1000, 9891, -1000, -1000, 9337,
	276, 614, 613, 606, 9337, 9337, 9337, 875, 747, 9337,
	-1000, -1000, 981, 9337, 9337, -1000, -1000, 976, 980, -1000,
	-1000, -1000, -1000, -1000, 976, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6245, -1000, -1000, 166, -1000,
	-1000, -1000, -1000, 1005, 155, 373, -1000, 6245, 1080, 665,
	665, -1000, -1000, 117, -1000, -1000, 6504, 6504, 6504, 6504,
	6504, 6504, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 665, 128, -1000, 5983, 665,
	665, 665, 665, 665, 665, 6245, 665, 665, 665, 665,
	665, 665, 665, 665, 665, 665, 665, 665, 665, -1000,
	-1000, 661, -1000, 304, 934, 525, 809, 7756, 763, -1000,
	-1000, 806, 9337, -1000, 9140, 4935, 971, 2607, -1000, 647,
	644, -178, -185, -1000, -187, 5197, -1000, -1000, -1000, -1000,
	139, -1000, 85, 665, 104, 6964, 1360, -32, -1000, -1000,
	-1000, 668, -1000, 668, 668, 668, 668, 11, 11, 11,
	11, -1000, -1000, -1000, -1000, -1000, 737, 727, -1000, 668,
	668, 668, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	718, 718, 718, 674, 674, 843, 856, 746, 742, 741,
	-1000, 136, 641, -1000, -1000, 9337, -1000, 934, -93, -1000,
	-1000, 268, 9337, 9337, -1000, -1000, -1000, -1000, 610, 298,
	-1000, 9337, -1000, -1000, -1000, 800, 6245, 6245, 395, 6245,
	6245, 171, 6504, 309, 263, 6504, 6504, 6504, 6504, 6504,
	6504, 6504, 6504, 6504, 6504, 6504, 6504, 6504, 6504, 6504,
	440, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 605,
	-1000, 726, 461, 461, 130, 130, 130, 130, 130, 1593,
	1938, 4644, 525, 5983, 5459, 5459, 6245, 6245, 5459, 902,
	267, 298, 8943, -1000, 525, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5459, 5459, 5459, 5459, 6245, -1000, -1000, -1000,
	854, -1000, 902, 953, -1000, 824, 821, 5459, -1000, 740,
	9140, 665, -1000, 7559, -1000, 713, -1000, 251, -1000, 124,
	-1000, -1000, -1000, -1000, -1000, 958, 6245, -1000, 4062, -1000,
	-180, -1000, -176, -191, -1000, -1000, -1000, -1000, -1000, 298,
	-1000, 589, 665, 665, 9534, -1000, 104, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 185, 185, 56, -1000, -1000, 185, 185,
	185, 185, 185, -59, -62, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, -1000, -1000,
	-1000, 566, 208, 167, -1000, -1000, -1000, -1000, 913, -1000,
	1360, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 273, 84, -1000, 910, -1000, 909, 514,
	1004, 401, 149, 126, -44, -1000, -1000, 455, 11, 11,
	-1000, -1000, -1000, 837, -1000, -1000, -1000, 512, 512, -1000,
	-1000, -1000, -1000, 452, -1000, -1000, -1000, 451, -1000, -1000,
	843, -1000, 54, -1000, 9337, 9337, 9337, -1000, 164, 206,
	69, 44, 42, 41, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9337, -1000, -1000, 495, -1000, -1000, -1000, 493,
	6245, -1000, 268, -1000, 6245, -1000, -1000, 814, 171, 201,
	-1000, -1000, 315, -1000, -1000, 298, 298, 1489, -1000, -1000,
	-1000, -1000, 309, 6504, 6504, 6504, 732, 1489, 812, 337,
	1607, 130, 300, 300, 141, 141, 141, 141, 141, 466,
	466, -1000, -1000, -1000, 525, -1000, -1000, -1000, 525, 5459,
	639, -1000, -1000, 6767, 116, 665, 114, -1000, -1000, 525,
	576, 576, 197, 381, 576, 5459, 266, -1000, 6245, 525,
	-1000, 576, 525, 576, 576, -1000, -1000, 9337, -1000, -1000,
	-1000, -1000, 719, -1000, 845, 633, 635, -1000, -1000, 5721,
	525, 597, 112, 958, 9140, 6245, 4644, 934, 298, -1000,
	-1000, -1000, -181, -197, -1000, -1000, 9534, 9534, 525, -1000,
	491, -1000, 401, 185, 185, -1000, 834, 450, 438, 433,
	490, 488, 185, 185, 432, 487, 587, 406, 405, 388,
	479, 484, 497, 478, 472, 471, 9731, 48, -1000, 566,
	-1000, 905, 208, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -110, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 628, -1000, -1000,
	272, 593, -1000, 585, 637, 583, -1000, 185, 185, 665,
	665, 665, -1000, 9337, -1000, -1000, -1000, 579, 7, 711,
	577, 9534, -1000, -1000, -1000, -1000, 298, -1000, 298, -1000,
	-1000, -1000, -1000, -1000, -1000, 732, 1489, 795, -1000, 6504,
	6504, -1000, -1000, 576, 5459, -1000, -1000, 8546, -1000, -1000,
	3771, 5459, 4353, -1000, -1000, -1000, 469, 440, 469, -130,
	684, 198, -1000, 6245, 289, -1000, -1000, -1000, -1000, -1000,
	-1000, 971, 8349, 895, -1000, 665, -1000, -1000, 736, 8943,
	8943, 934, -1000, 298, -1000, -1000, -1000, -1000, -1000, 525,
	525, 3189, -1000, -1000, 401, 401, -1000, -1000, -1000, -1000,
	-1000, -1000, 483, 481, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 706, -1000, 961, 704, 48,
	566, -1000, 686, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	475, -1000, 387, -1000, 386, 547, 261, 8943, 8943, 8943,
	-1000, -1000, -1000, 831, -1000, -1000, -1000, -1000, 6504, 1489,
	1489, -1000, -1000, -1000, -1000, 109, 525, -1000, 525, 668,
	668, -1000, 668, 674, -1000, 668, 24, 668, 16, 525,
	525, 665, -127, -1000, 298, 6245, 968, 636, 833, -1000,
	-1000, -1000, 893, 7163, 7360, 1003, -1000, 665, -1000, 726,
	108, -1000, -1000, -150, 665, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 8943, -1000, -1000, -1000, -1000, 8943, 672, 48,
	353, -1000, 624, 586, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 574, -1000, 668, 574, 574, 564, 1489, 3480, -1000,
	-1000, -1000, 107, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6504, 525, 474, 298, 966, 937, 8349, 8349, 8349,
	8349, -1000, 772, 768, -1000, 762, 758, 799, 9337, -1000,
	570, 7163, 152, -1000, 8152, -1000, -1000, 9140, 635, 525,
	8943, 3189, 336, -147, 555, 553, 8943, 667, -1000, 556,
	-1000, -1000, -1000, 8943, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 324, -1000, -1000, -1000, 6245, 6245, 833, 733, 549,
	-1000, -1000, -1000, -1000, 766, -1000, 765, -1000, -1000, -1000,
	-1000, -1000, 77, 76, 74, -1000, 630, -1000, -1000, -1000,
	-1000, 550, -1000, 529, -1000, -1000, 535, 8943, -1000, 165,
	-1000, 93, 344, 525, 67, -138, 298, 578, 6245, 6245,
	-1000, -1000, 665, 665, 665, -147, 3189, 811, 89, 89,
	-1000, 528, 892, -1000, -1000, -1000, 185, 467, 931, 892,
	-1000, -1000, 924, 892, -1000, -1000, 813, -133, -142, 298,
	298, 8943, 8943, 8943, -1000, -1000, 144, -1000, 185, -1000,
	396, 922, 89, -1000, -1000, 185, 185, 335, -1000, -1000,
	-1000, -1000, 518, -1000, 803, -1000, 524, -1000, 524, 524,
	665, 318, -1000, 517, 89, 547, 547, -1000, -1000, -136,
	-1000, 8943, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -140,
	-1000, -143, -1000,
}
var yyPgo = [...]int{

	0, 21, 17, 1340, 1339, 1338, 25, 1337, 1335, 1333,
	1331, 1325, 1322, 1317, 42, 811, 1315, 1313, 1311, 1310,
	1309, 1308, 1303, 1302, 1284, 1283, 1280, 1278, 1277, 1273,
	1266, 157, 1264, 1262, 1261, 1259, 1257, 72, 1255, 82,
	1250, 1248, 1246, 32, 149, 33, 34, 208, 1245, 27,
	20, 18, 1241, 1240, 15, 1239, 1306, 1238, 84, 1237,
	1235, 47, 1234, 1233, 1229, 3, 31, 1226, 56, 1225,
	1224, 73, 420, 1220, 1215, 1214, 1213, 1212, 1211, 41,
	9, 19, 13, 26, 1210, 59, 35, 1209, 49, 1208,
	1207, 1203, 1202, 40, 1201, 70, 1200, 48, 69, 1198,
	45, 12, 37, 1197, 1196, 71, 77, 75, 67, 1194,
	63, 1193, 1177, 155, 1169, 1165, 1163, 801, 1156, 359,
	465, 1155, 52, 1154, 61, 0, 58, 4, 29, 1153,
	78, 1018, 39, 16, 1152, 1151, 241, 2, 30, 76,
	28, 1149, 1148, 1147, 1146, 1145, 1141, 1140, 276, 1137,
	1136, 1135, 1133, 1131, 1127, 1125, 1124, 1122, 1120, 1117,
	1116, 1114, 1113, 1110, 1108, 1105, 1104, 1095, 1094, 1093,
	1091, 1086, 1084, 1083, 1076, 1075, 1074, 1072, 14, 1071,
	1070, 1069, 23, 54, 24, 55, 1067, 1065, 1063, 65,
	22, 1059, 1054, 1052, 1051, 60, 36, 1050, 74, 46,
	44, 1047, 1046, 1044, 79, 10, 8, 1042, 11, 1041,
	1040, 5, 7, 1038, 1037, 1036, 1035, 1034, 1031, 1030,
	1, 1028, 1027, 62, 1026, 1025, 57, 6, 1024, 1023,
	1021, 50, 53, 1020, 125,
}
var yyR1 = [...]int{

	0, 229, 230, 230, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 14, 14, 14, 15, 16, 16, 17,
	17, 18, 18, 34, 34, 19, 20, 21, 21, 228,
	228, 227, 153, 153, 22, 22, 22, 22, 22, 22,
	22, 22, 219, 219, 220, 220, 214, 212, 212, 209,
	209, 216, 216, 207, 207, 213, 213, 210, 210, 208,
	208, 215, 215, 224, 224, 225, 225, 226, 226, 185,
	185, 184, 184, 183, 183, 186, 186, 186, 25, 200,
	202, 202, 203, 203, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 156,
	158, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 171, 172, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 174,
	174, 175, 175, 176, 176, 177, 177, 159, 182, 182,
	157, 152, 154, 155, 155, 201, 201, 201, 196, 130,
	130, 141, 141, 141, 141, 221, 221, 222, 222, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 144,
	144, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	143, 143, 143, 143, 143, 145, 145, 145, 145, 145,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 147, 147, 147, 147, 147,
	147, 147, 147, 195, 195, 148, 148, 189, 189, 190,
	190, 190, 187, 187, 188, 188, 191, 191, 149, 149,
	149, 149, 149, 149, 36, 35, 35, 35, 115, 115,
	115, 192, 178, 178, 178, 151, 179, 179, 180, 180,
	180, 181, 181, 181, 193, 193, 194, 194, 150, 197,
	197, 197, 197, 6, 6, 217, 217, 217, 217, 211,
	211, 4, 4, 4, 1, 2, 2, 3, 3, 3,
	5, 5, 199, 199, 198, 198, 206, 206, 205, 23,
	23, 23, 23, 23, 23, 23, 23, 24, 24, 24,
	62, 62, 7, 26, 8, 9, 10, 10, 11, 11,
	11, 11, 12, 12, 12, 12, 12, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 42, 42, 58, 58, 59, 59, 60,
	60, 61, 61, 61, 30, 28, 29, 29, 29, 29,
	233, 31, 32, 32, 33, 33, 33, 39, 39, 39,
	37, 37, 38, 38, 45, 45, 44, 44, 46, 46,
	46, 46, 129, 129, 129, 128, 128, 48, 48, 49,
	49, 50, 50, 51, 51, 51, 63, 52, 52, 52,
	52, 135, 135, 134, 134, 134, 133, 133, 53, 53,
	53, 53, 54, 54, 54, 54, 55, 55, 57, 57,
	56, 56, 64, 64, 64, 64, 65, 65, 66, 66,
	47, 47, 47, 47, 47, 47, 47, 118, 118, 68,
	68, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 78, 78, 78, 78, 78, 78, 69, 69, 69,
	69, 69, 69, 69, 43, 43, 79, 79, 79, 85,
	80, 80, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 76, 76, 76, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 75, 75, 75, 75, 75, 75,
	75, 75, 234, 234, 77, 77, 77, 77, 40, 40,
	40, 40, 40, 138, 138, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 89, 89,
	41, 41, 87, 87, 88, 90, 90, 86, 86, 86,
	71, 71, 71, 71, 71, 71, 71, 73, 73, 73,
	91, 91, 92, 92, 93, 93, 94, 94, 95, 96,
	96, 96, 97, 97, 97, 97, 98, 98, 98, 70,
	70, 70, 70, 70, 70, 99, 99, 99, 99, 100,
	100, 81, 81, 83, 83, 82, 84, 101, 101, 102,
	103, 103, 106, 106, 105, 105, 105, 105, 105, 114,
	114, 113, 113, 113, 104, 104, 107, 107, 111, 111,
	110, 112, 112, 112, 112, 109, 109, 108, 108, 139,
	139, 139, 116, 116, 119, 119, 120, 120, 117, 117,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	122, 122, 122, 123, 123, 218, 218, 126, 126, 127,
	127, 131, 131, 132, 132, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 231, 232, 136, 137,
	137, 137,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 3, 1,
	3, 5, 0, 2, 2, 10, 12, 8, 5, 11,
	11, 11, 1, 1, 1, 1, 2, 3, 2, 0,
	2, 1, 1, 0, 2, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 1, 2, 4, 4, 0,
	1, 0, 1, 1, 2, 1, 1, 1, 4, 4,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 4, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	3, 3, 4, 1, 1, 1, 3, 3, 3, 1,
	1, 3, 1, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 4, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 3, 4, 1, 1,
	1, 1, 0, 3, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 1, 2, 7,
	7, 8, 9, 0, 1, 3, 1, 2, 3, 0,
	2, 0, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 3, 2, 6,
	7, 7, 7, 9, 7, 7, 7, 4, 5, 4,
	1, 3, 3, 3, 2, 2, 3, 4, 2, 3,
	2, 2, 4, 4, 3, 6, 3, 6, 5, 5,
	3, 3, 5, 6, 3, 3, 3, 5, 3, 3,
	3, 3, 3, 0, 3, 0, 2, 0, 1, 1,
	1, 0, 2, 2, 4, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 5, 5,
	3, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 1, 3, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 1, 2, 3, 3, 3, 2, 3, 1,
	2, 1, 1, 1, 2, 3, 2, 2, 0, 2,
	3, 2, 2, 2, 1, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -229, -13, -14, -18, -19, -20, -21, -22, -23,
	-24, -7, -26, -27, -30, -28, -8, -9, -10, -11,
	-12, -29, -15, -16, 6, -34, 8, 9, 40, -25,
	121, 122, 123, 144, 125, 137, 43, 60, 262, 139,
	269, 272, 273, 276, 275, 290, 36, 138, 142, 143,
	-231, 7, 246, 63, -230, 296, -93, 14, -33, 5,
	-31, -233, -31, -31, -31, -31, -200, 63, 238, -218,
	22, 27, 128, 29, -117, 132, 128, 129, 238, 128,
	128, 232, 121, 227, 264, -59, 266, 267, 234, 128,
	268, 230, 265, 229, 66, 42, 128, -131, 66, -125,
	252, 19, 199, 145, 164, 253, 295, 75, 198, 201,
	202, 140, 160, 204, 203, 196, 154, 38, 194, 178,
	270, 257, 236, 193, 155, 22, 179, 183, 277, 206,
	177, 24, 254, 45, 181, 207, 49, 197, 208, 185,
	184, 186, 167, 17, 209, 210, 180, 182, 256, 142,
	211, 48, 190, 271, 273, 234, 195, 169, 158, 159,
	144, 258, 130, 161, 290, 291, 293, 292, 294, -136,
	-136, 69, 256, -136, 274, -136, -136, 291, 293, 292,
	294, 295, -136, -136, -136, -136, -14, -97, 16, 15,
	-17, -15, -231, 6, 31, 32, -39, 50, 51, -32,
	-117, -56, -131, 10, -103, -104, -106, 274, -139, -105,
	278, 279, 277, -127, -114, 280, -126, -124, 168, 165,
	66, -125, 81, 33, 35, 188, 84, 151, 116, 173,
	15, 85, 162, 115, 235, 200, 247, 121, 58, 239,
	240, 237, 238, 227, 156, 39, 9, 36, 138, 32,
	109, 123, 88, 89, 264, 141, 34, 139, 78, 18,
	61, 10, 42, 12, 13, 133, 132, 100, 129, 56,
	7, 149, 150, 117, 37, 97, 52, 30, 54, 98,
	16, 241, 242, 41, 176, 172, 251, 175, 148, 171,
	111, 59, 46, 82, 76, 157, 79, 62, 143, 80,
	14, 57, 267, 135, 266, 153, 99, 124, 246, 55,
	6, 250, 40, 137, 147, 53, 128, 228, 174, 146,
	170, 87, 131, 77, 268, 5, 29, 191, 8, 60,
	134, 243, 244, 245, 44, 166, 163, 265, 255, 86,
	11, 192, 259, 263, -201, -196, -130, 66, -125, -120,
	133, 129, 129, 129, -120, 128, -119, 133, 66, -119,
	-56, -56, 231, 128, 238, -136, -136, 228, -60, 235,
	236, -136, -136, -136, 234, -136, -136, -136, -136, -136,
	-56, -136, 69, -136, -82, -231, -82, -136, -56, -136,
	-232, 65, -98, 18, 41, -47, -67, 82, -72, 39,
	34, -71, -68, -86, -84, -85, 116, 105, 106, 113,
	83, 117, -76, -74, -75, -77, 68, 67, 69, 70,
	71, 72, 76, 77, 78, -126, -131, -82, -231, 54,
	55, 247, 248, 251, 249, 85, 44, 237, 245, 244,
	243, 241, 242, 239, 240, 133, 238, 111, 246, 66,
	-125, -94, -95, -47, -93, -14, -31, 46, -37, 32,
	74, -57, 37, -56, 40, 118, -56, 64, -107, -110,
	-108, 281, 283, -105, 274, 90, -113, -126, 68, 39,
	-113, 40, 15, 15, 65, 64, -141, -144, -146, -145,
	-147, -142, -143, 162, 163, 116, 166, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 40, 140, 158,
	159, 160, 161, 179, 180, 181, 182, 183, 184, 185,
	186, 145, 164, 253, 146, 147, 148, 149, 150, 151,
	153, 154, 155, 156, 157, -131, 82, 66, 66, 66,
	-56, -56, -62, -56, 34, 62, -131, -42, 10, -56,
	-56, -58, 10, 10, -58, -136, -136, -136, -80, -47,
	-136, -122, 131, 33, 8, 100, 81, 80, 97, 64,
	17, -47, -69, 100, 82, 98, 99, 84, 102, 101,
	112, 105, 106, 107, 108, 109, 110, 111, 103, 104,
	115, 90, 91, 92, 93, 94, 95, 96, -118, -231,
	-85, -231, 119, 120, -72, -72, -72, -72, -72, -72,
	-231, 118, -14, -231, -231, -231, -231, -231, -231, -231,
	-89, -47, -231, -234, -231, -234, -234, -234, -234, -234,
	-234, -234, -231, -231, -231, -231, 64, -96, 35, 36,
	-97, -232, -39, -73, -126, 69, 72, -38, 53, -70,
	40, 44, -14, -231, -56, -101, -102, -86, -126, -131,
	-132, -131, -124, 165, 168, -66, 11, -106, -139, -109,
	64, -111, 64, 282, 284, 285, -107, 62, 79, -47,
	-179, 115, 23, 261, -231, -202, -203, -204, -157, -152,
	-154, -155, -156, -158, -159, -160, -161, -162, -163, -164,
	-165, -166, -167, -168, -169, -170, -171, -172, -173, -174,
	-175, -176, -177, 75, 270, -185, 277, 271, 188, 199,
	43, 200, 201, 202, 129, 204, 205, 206, 24, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 39, -196,
	-197, -198, -5, -4, 129, 30, 27, 22, 21, -221,
	-222, -223, -191, -149, -192, -193, -194, -150, -36, -151,
	-180, -181, 76, 82, 39, 188, 135, 30, 29, 75,
	62, 115, 198, 195, -187, 191, -148, 63, -148, -148,
	-148, -148, -178, 165, -178, -178, -178, 63, 63, -148,
	-148, -148, -189, 63, -189, -189, -190, 63, -190, -224,
	-225, -226, -185, 34, 62, 62, 62, -121, 124, 270,
	247, 126, 123, 127, 122, 188, 165, 75, 39, 14,
	258, 66, 64, -56, -97, 233, -136, -136, -61, 98,
	11, -56, -56, -136, 64, -232, -56, 48, -47, -47,
	-78, 76, 82, 77, 78, -47, -47, -72, -79, -82,
	-85, 73, 100, 98, 99, 84, -72, -72, -72, -72,
	-72, -72, -72, -72, -72, -72, -72, -72, -72, -72,
	-72, -138, 66, 68, 66, -71, -71, -126, -45, 32,
	-44, -46, 107, -47, -131, -127, -132, -124, -232, -14,
	-44, -44, -47, -47, -44, -37, -87, -88, 86, -126,
	-232, -44, -45, -44, -44, -95, -98, -116, 18, 10,
	44, 44, -44, -100, 62, -101, -81, -83, -82, -231,
	-14, -99, -126, -66, 64, 90, 118, -93, -47, -108,
	-110, -112, 286, 283, 289, 66, -231, -231, -130, -204,
	-184, 90, -184, 115, -183, 168, 165, -184, -184, -184,
	-184, -184, 203, 203, -184, -184, -184, -184, -184, -184,
	-184, -184, -184, -184, -184, -184, -184, -6, 66, -199,
	-198, 135, 29, 28, -223, 76, 68, 69, 70, 76,
	237, -68, 30, 30, 68, 8, -182, 66, 68, 193,
	194, 39, 39, 196, 197, -188, 192, 69, -178, -178,
	40, -195, 68, -195, 69, 69, -226, 115, -183, -56,
	-56, -56, -136, -122, -123, 129, 30, 90, 131, 136,
	136, 136, -56, -136, 68, 68, -47, -61, -47, -136,
	49, 76, 77, 78, -79, -72, -72, -72, -43, 141,
	81, -232, -232, -44, 64, -129, -128, 33, -126, 68,
	118, -231, 118, -232, -232, -232, 64, 134, 33, -232,
	-44, -90, -88, 88, -47, -232, -232, -232, -232, -232,
	-56, -48, 10, 38, -100, 64, -232, -232, -232, 64,
	118, -93, -102, -47, -127, -97, 283, 287, 288, -130,
	-130, -232, 68, -182, -184, -184, 40, 69, 69, 69,
	68, 68, -184, -184, 69, 68, 66, 69, 69, 69,
	69, 39, 68, 39, 194, 193, 216, 217, 218, 219,
	220, 221, 222, 223, 224, 225, 226, 69, 39, 69,
	39, 69, 39, 66, -125, -2, -1, 134, -6, 30,
	-199, -35, -115, 237, 241, 242, 65, 66, 116, 65,
	64, 65, 64, 65, 64, -184, -184, -231, -231, -231,
	-56, -136, 66, 165, -200, 66, -196, -43, 81, -72,
	-72, -232, -46, -128, 107, -132, -45, -127, -140, 116,
	162, 140, 160, 156, 177, 167, 190, 158, 191, -138,
	-140, 252, -93, 89, -47, 87, -66, -49, -50, -51,
	-52, -63, -85, -231, -56, 30, -83, 44, -14, -231,
	-126, -126, -97, -232, -232, -137, -231, -127, -182, -182,
	68, 68, 63, -3, 23, 20, 26, 63, -2, -6,
	63, 68, 69, 69, -220, 66, 39, -186, 66, 116,
	39, -206, -205, -126, -206, -206, 40, -72, 118, -232,
	-232, -148, -148, -148, -190, -148, 150, -148, 150, -232,
	-232, -231, -41, 250, -47, -91, 12, 64, -53, -54,
	-55, 52, 56, 58, 53, 54, 55, 59, -135, 33,
	-49, -231, -134, -133, 33, -131, 68, 8, -81, -14,
	118, -153, 260, -231, -206, -206, 63, -2, 65, 69,
	65, 65, -232, 64, -148, -232, -232, 66, 107, -178,
	66, -72, -232, 68, -92, 13, 15, -50, -51, -50,
	-51, 52, 52, 52, 57, 52, 57, 52, -54, -131,
	-232, -64, 60, 132, 61, -133, -101, -232, -126, -137,
	69, -228, -227, 259, 65, 65, -206, 63, 65, -209,
	-205, -207, -210, -40, 100, 255, -47, -80, 62, 62,
	52, 52, 129, 129, 129, 64, -232, 66, -211, -211,
	65, -206, -208, -216, -212, -214, 24, 75, 134, -208,
	-213, -212, 255, -208, -212, -232, 253, 59, 256, -47,
	-47, -231, -231, -231, -227, -137, 44, -217, 24, -1,
	75, 255, -211, 65, -215, 41, 19, -184, 68, -219,
	23, 20, 25, 49, 254, 257, -65, -126, -65, -65,
	100, -184, 68, 25, -211, -184, -184, 69, 66, 49,
	-232, 64, -232, -232, -82, 69, 66, -220, -220, 255,
	-126, 256, 257,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 584, 0, 370, 370, 370, 370, 370, 0,
	675, 658, 0, 0, 0, 357, 0, 0, 878, 878,
	0, 878, 0, 878, 878, 0, 878, 878, 878, 878,
	0, 33, 34, 876, 1, 3, 592, 0, 0, 374,
	377, 372, 658, 0, 0, 0, 44, 0, 656, 0,
	0, 0, 656, 676, 0, 659, 654, 0, 654, 0,
	0, 0, 0, 878, 878, 0, 878, 878, 878, 0,
	878, 878, 878, 878, 878, 358, 0, 365, 681, 682,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 324,
	325, 878, 0, 328, 878, 330, 331, 0, 0, 878,
	0, 878, 366, 367, 368, 369, 27, 596, 0, 0,
	584, 29, 0, 370, 375, 376, 380, 378, 379, 371,
	0, 0, 430, 0, 37, 38, 620, 0, 0, 622,
	649, 650, -2, 0, 0, 0, 679, 680, -2, 696,
	677, 678, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 0, 0, 0, 165, 0, 169, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 323, 353, 0, 0, 340, 341, 355, 0, 359,
	360, 344, 345, 346, 355, 348, 349, 350, 351, 352,
	878, 326, 878, 329, 878, 0, 878, 334, 670, 336,
	28, 877, 23, 0, 0, 593, 440, 0, 445, 447,
	0, 482, 483, 484, 485, 486, 0, 0, 0, 0,
	0, 0, 508, 509, 510, 511, 570, 571, 572, 573,
	574, 575, 576, 449, 450, 567, 0, 616, 0, 0,
	0, 0, 0, 0, 0, 558, 0, 532, 532, 532,
	532, 532, 532, 532, 532, 0, 0, 0, 0, -2,
	-2, 585, 586, 589, 592, 27, 377, 0, 382, 381,
	373, 0, 0, 429, 0, 0, 438, 0, 634, 645,
	638, 0, 0, 623, 0, 0, 627, 631, 632, 633,
	266, 630, 0, 0, -2, 291, 175, 242, 172, 173,
	174, 235, 190, 235, 235, 235, 235, 262, 262, 262,
	262, 218, 219, 220, 221, 222, 0, 0, 205, 235,
	235, 235, 209, 225, 226, 227, 228, 229, 230, 231,
	232, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	237, 237, 237, 239, 239, -2, 0, 0, 0, 0,
	88, 0, 317, 320, 655, 0, 319, 592, 0, 878,
	878, 361, 0, 0, 878, 364, 327, 332, 0, 480,
	333, 0, 671, 672, 597, 0, 0, 0, 0, 0,
	0, 443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 467, 468, 469, 470, 471, 472, 473, 446, 0,
	460, 0, 0, 0, 502, 503, 504, 505, 506, 0,
	384, 0, 27, 0, 0, 0, 0, 0, 0, 380,
	0, 559, 0, 524, 0, 525, 526, 527, 528, 529,
	530, 531, 0, 384, 0, 0, 0, 588, 590, 591,
	596, 30, 380, 0, 577, 0, 0, 0, 383, 609,
	0, 0, -2, 0, 428, 438, 617, 0, 567, 0,
	431, 683, 684, 696, 697, 584, 0, 621, 0, 636,
	0, 637, 0, 0, 647, 648, 635, 624, 625, 626,
	628, 0, 0, 0, 0, 89, -2, 92, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 81, 81, 0, 163, 164, 81, 81,
	81, 81, 81, 0, 0, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 80, 166,
	167, 283, 302, 0, 304, 305, 300, -2, 292, 168,
	176, 177, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 246, 0, 0, 261, 0, 275, 277, 0,
	0, 0, 0, 0, 244, 243, 189, 0, 262, 262,
	212, 213, 214, 0, 215, 216, 217, 0, 0, 206,
	207, 208, 200, 0, 201, 202, 203, 0, 204, 48,
	-2, 75, 0, 657, 0, 0, 0, 878, 670, 0,
	667, 0, 665, 0, 660, 661, 662, 663, 664, 666,
	668, 669, 0, 318, 878, 0, 338, 339, 342, 0,
	0, 356, 361, 347, 0, 615, 878, 0, 441, 442,
	444, 461, 0, 463, 465, 594, 595, 451, 452, 476,
	477, 478, 0, 0, 0, 0, 474, 456, 0, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 501, 543, 544, 0, 499, 500, 507, 0, 0,
	385, 386, 388, 392, 0, 568, 0, -2, 479, 27,
	0, 0, 0, 0, 0, 0, 565, 562, 0, 0,
	533, 0, 0, 0, 0, 587, 24, 0, 652, 653,
	578, 579, 397, 31, 0, 609, 599, 611, 613, 0,
	27, 0, 605, 584, 0, 0, 0, 592, 439, 646,
	639, 640, 0, 0, 644, 267, 0, 0, 0, 93,
	0, 82, 0, 81, 81, 83, 0, 0, 0, 0,
	0, 0, 81, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 284, 283,
	303, 0, 302, 293, 178, 247, 248, 249, 250, 251,
	252, 253, 274, 276, 278, 0, 265, 158, 159, 268,
	269, 270, 271, 272, 273, 171, 245, 0, 210, 211,
	0, 0, 233, 0, 0, 0, 76, 81, 81, 0,
	0, 0, 309, 0, 878, 673, 674, 0, 0, 0,
	0, 0, 321, 337, 354, 362, 363, 343, 481, 335,
	598, 462, 464, 466, 453, 474, 457, 0, 454, 0,
	0, 448, 512, 0, 0, 389, 393, 0, 395, 396,
	0, 384, 0, -2, 515, 516, 0, 0, 0, 0,
	584, 0, 563, 0, 0, 523, 534, 535, 536, 537,
	25, 438, 0, 0, 32, 0, 614, -2, 0, 0,
	0, 592, 618, 619, 568, 36, 641, 642, 643, 0,
	0, 879, 160, 161, 0, 0, 84, 119, 120, 157,
	122, 123, 0, 0, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 0, 296, 0, 0, 295,
	283, 254, 255, 258, 259, 260, 236, 263, 264, 223,
	0, 224, 0, 240, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 0, 314, 315, 316, 455, 0, 475,
	458, 513, 387, 394, 390, 0, 0, 569, 0, 235,
	235, 548, 235, 239, 551, 235, 553, 235, 556, 0,
	0, 0, 560, 522, 566, 0, 580, 398, 399, 401,
	402, 403, 411, 0, 413, 0, 612, 0, -2, 0,
	607, 606, 35, 42, 0, 47, 880, 881, 121, 162,
	124, 125, 0, 294, 297, 298, 299, 0, 0, 295,
	0, 234, 0, 0, 77, 54, 55, 78, 85, 86,
	87, 0, 306, 235, 0, 0, 0, 459, 0, 514,
	517, 545, 262, 549, 550, 552, 554, 555, 557, 519,
	518, 0, 0, 0, 564, 582, 0, 0, 0, 0,
	0, 418, 0, 0, 421, 0, 0, 0, 0, 412,
	0, 0, 432, 414, 0, 416, 417, 0, 602, 27,
	0, 879, 0, 0, 0, 0, 0, 0, 256, 0,
	238, 241, 59, 0, 308, 63, 67, 313, 391, 546,
	547, 538, 521, 561, 26, 0, 0, 400, 407, 0,
	410, 419, 420, 422, 0, 424, 0, 426, 427, 404,
	405, 406, 0, 0, 0, 415, 610, -2, 608, 45,
	43, 0, 39, 0, 289, 289, 0, 0, 257, 69,
	307, 69, 69, 0, 0, 0, 583, 581, 0, 0,
	423, 425, 0, 0, 0, 0, 879, 0, 279, 280,
	289, 0, 49, 60, 61, 62, 81, 0, 0, 50,
	64, 65, 0, 51, 68, 520, 0, 0, 0, 408,
	409, 0, 0, 0, 40, 46, 0, 290, 81, 286,
	0, 0, 281, 289, 70, 81, 81, 0, 58, 56,
	52, 53, 0, 539, 0, 542, 0, 436, 0, 0,
	0, 0, 287, 0, 282, 0, 0, 57, 66, 540,
	433, 0, 434, 435, 41, 285, 288, 71, 72, 0,
	437, 0, 541,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 83, 3, 3, 3, 110, 102, 3,
	63, 65, 107, 105, 64, 106, 118, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 296,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1006
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1012
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1014
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1042
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1087
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1098
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1158
		{
			yyVAL.optVal = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1162
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1172
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1178
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.PartitionNum = yyDollar[9].optVal
			if yyDollar[2].tableSpec.Options.Type == GlobalTableType || yyDollar[2].tableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with PARTITION")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 46:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1192
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableList
			yyDollar[1].ddl.PartitionOptions = yyDollar[10].partitionDefinitions
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1201
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.BackendName = yyDollar[6].colIdent.String()
			if yyDollar[2].tableSpec.Options.Type == GlobalTableType || yyDollar[2].tableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with DISTRIBUTED")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1214
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 49:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 50:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 51:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.str = "hash"
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.str = "btree"
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.str = "default"
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1341
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1352
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1399
		{
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1401
		{
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1404
		{
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1406
		{
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.str = "character set"
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.str = "default"
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1434
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableType); val != nil {
					yyVAL.tableSpec.Options.Type = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
			if yyVAL.tableSpec.Options.Type == "" {
				yyVAL.tableSpec.Options.Type = NormalTableType
			}
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableType,
				Val:  yyDollar[1].optVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1729
		{
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1745
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1782
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1798
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1952
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(GlobalTableType))
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(SingleTableType))
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2007
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.optVal = nil
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2353
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2375
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2433
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.str = yyDollar[3].str
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2453
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2457
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2480
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2500
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2509
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2529
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2549
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2568
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2574
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2586
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2600
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2611
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.str = ""
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2637
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2658
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2666
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2676
		{
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2679
		{
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2682
		{
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2693
		{
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2696
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2702
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2706
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2710
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2716
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2720
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2725
		{
			// set empty
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2730
		{
			yyVAL.str = yyDollar[1].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2737
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2767
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2772
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2777
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2781
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2799
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2807
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2812
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2822
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2826
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2832
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2838
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2844
		{
			yyVAL.statement = &Xa{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.statement = &Explain{}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2860
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2870
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2874
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2878
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2888
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2896
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2900
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 337:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2906
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2922
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2926
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 343:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2930
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2938
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2942
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 347:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2946
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2950
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2954
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2962
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2966
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2971
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2975
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2980
		{
			yyVAL.tableName = TableName{}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2984
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2990
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2994
		{
			yyVAL.str = "full "
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3000
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3004
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3010
		{
			yyVAL.showFilter = nil
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3014
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3018
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3024
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3030
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3036
		{
			yyVAL.statement = &OtherRead{}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3040
		{
			yyVAL.statement = &OtherRead{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3044
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3048
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3053
		{
			setAllowComments(yylex, true)
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3056
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3062
		{
			yyVAL.bytes2 = nil
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3066
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3072
		{
			yyVAL.str = UnionStr
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3076
		{
			yyVAL.str = UnionAllStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3080
		{
			yyVAL.str = UnionDistinctStr
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3085
		{
			yyVAL.str = ""
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3089
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3093
		{
			yyVAL.str = SQLCacheStr
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3098
		{
			yyVAL.str = ""
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3102
		{
			yyVAL.str = DistinctStr
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3107
		{
			yyVAL.str = ""
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3111
		{
			yyVAL.str = StraightJoinHint
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3116
		{
			yyVAL.selectExprs = nil
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3120
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3126
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3130
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3136
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3140
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3144
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3148
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3153
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3157
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3161
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3173
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3177
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3183
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3187
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3197
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3201
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3205
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3211
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3224
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3228
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3232
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3236
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3241
		{
			yyVAL.empty = struct{}{}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3245
		{
			yyVAL.empty = struct{}{}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3250
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3254
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3258
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3265
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3271
		{
			yyVAL.str = JoinStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3275
		{
			yyVAL.str = JoinStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3279
		{
			yyVAL.str = JoinStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3283
		{
			yyVAL.str = StraightJoinStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3289
		{
			yyVAL.str = LeftJoinStr
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3293
		{
			yyVAL.str = LeftJoinStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3297
		{
			yyVAL.str = RightJoinStr
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3301
		{
			yyVAL.str = RightJoinStr
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3307
		{
			yyVAL.str = NaturalJoinStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3311
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3321
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3325
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3331
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3335
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3340
		{
			yyVAL.indexHints = nil
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3344
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3348
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3352
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3358
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3362
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3367
		{
			yyVAL.expr = nil
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3371
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3377
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3381
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3385
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3389
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3393
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3397
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3401
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3407
		{
			yyVAL.str = ""
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3411
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3417
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3421
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3427
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3431
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3435
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3439
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3443
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3447
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3451
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3455
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3459
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3463
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3469
		{
			yyVAL.str = IsNullStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3473
		{
			yyVAL.str = IsNotNullStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3477
		{
			yyVAL.str = IsTrueStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3481
		{
			yyVAL.str = IsNotTrueStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3485
		{
			yyVAL.str = IsFalseStr
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3489
		{
			yyVAL.str = IsNotFalseStr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3495
		{
			yyVAL.str = EqualStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3499
		{
			yyVAL.str = LessThanStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3503
		{
			yyVAL.str = GreaterThanStr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3507
		{
			yyVAL.str = LessEqualStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3511
		{
			yyVAL.str = GreaterEqualStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3515
		{
			yyVAL.str = NotEqualStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3519
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3524
		{
			yyVAL.expr = nil
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3528
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3534
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3538
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3542
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3548
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3554
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3558
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3564
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3568
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3572
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3576
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3580
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3584
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3588
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3592
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3596
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3600
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3604
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3608
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3612
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3616
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3620
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3624
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3628
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3632
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3636
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3640
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3644
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3648
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3656
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3670
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3674
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3678
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3696
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3700
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3704
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3714
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3718
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3722
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 518:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3726
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 519:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3730
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 520:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3734
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 521:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3738
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3742
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3746
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3756
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3760
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3764
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3768
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3773
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3778
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3783
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3788
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3803
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3807
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3811
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3815
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3821
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3825
		{
			yyVAL.str = BooleanModeStr
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3829
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 541:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3833
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3837
		{
			yyVAL.str = QueryExpansionStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3843
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3847
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3853
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3857
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3861
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3865
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3869
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3873
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3879
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3883
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3887
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3891
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3895
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3899
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3903
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3908
		{
			yyVAL.expr = nil
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3912
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3917
		{
			yyVAL.str = string("")
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3921
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3927
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3931
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3937
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3942
		{
			yyVAL.expr = nil
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3946
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3952
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3956
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3960
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3966
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3970
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3974
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3978
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3982
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3986
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3990
		{
			yyVAL.expr = &NullVal{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3996
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4005
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4009
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4014
		{
			yyVAL.exprs = nil
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4018
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4023
		{
			yyVAL.expr = nil
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4027
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4032
		{
			yyVAL.orderBy = nil
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4036
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4042
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4046
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4052
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4057
		{
			yyVAL.str = AscScr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4061
		{
			yyVAL.str = AscScr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4065
		{
			yyVAL.str = DescScr
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4070
		{
			yyVAL.limit = nil
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4074
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4078
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4082
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4087
		{
			yyVAL.str = ""
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4091
		{
			yyVAL.str = ForUpdateStr
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4095
		{
			yyVAL.str = ShareModeStr
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4108
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4112
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4116
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4121
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4125
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4129
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4136
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4140
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4144
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4148
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4153
		{
			yyVAL.updateExprs = nil
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4157
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4163
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4167
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4173
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4177
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4183
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4189
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4199
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4203
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4209
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4215
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4219
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4225
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4229
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4236
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4240
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4244
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4248
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4252
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4259
		{
			yyVAL.bytes = []byte("charset")
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4265
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4269
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4273
		{
			yyVAL.expr = &Default{}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4279
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4283
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4289
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4293
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4299
		{
			yyVAL.str = ""
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4303
		{
			yyVAL.str = yyDollar[2].str
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4309
		{
			yyVAL.str = yyDollar[3].str
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4315
		{
			yyVAL.str = RepeatableRead
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4319
		{
			yyVAL.str = ReadCommitted
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4323
		{
			yyVAL.str = ReadUncommitted
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4327
		{
			yyVAL.str = Serializable
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4333
		{
			yyVAL.str = ""
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4337
		{
			yyVAL.str = yyDollar[2].str
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4343
		{
			yyVAL.str = TxReadWrite
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4347
		{
			yyVAL.str = TxReadOnly
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4353
		{
			yyVAL.str = SessionStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4357
		{
			yyVAL.str = SessionStr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4361
		{
			yyVAL.str = GlobalStr
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4370
		{
			yyVAL.byt = 0
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4374
		{
			yyVAL.byt = 1
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4379
		{
			yyVAL.byt = 0
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4383
		{
			yyVAL.byt = 1
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4388
		{
			yyVAL.str = ""
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4392
		{
			yyVAL.str = IgnoreStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4398
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4402
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4406
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4410
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4414
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4418
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4422
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4426
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4430
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4434
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4439
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4443
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4447
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4453
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4457
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4462
		{
			yyVAL.str = IndexStr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4466
		{
			yyVAL.str = UniqueStr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4472
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4476
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4483
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4489
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4493
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4500
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4718
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4727
		{
			decNesting(yylex)
		}
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4732
		{
			forceEOF(yylex)
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4737
		{
			forceEOF(yylex)
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4741
		{
			forceEOF(yylex)
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4745
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
